<?php

// Generated by Haxe 3.4.4
class api_MailApi extends ufront_api_UFApi {
	public function __construct() { if(!php_Boot::$skip_constructor) {
		parent::__construct();
	}}
	public function parseEmailJson($pJson) {
		$parsed = haxe_Json::phpJsonDecode($pJson);
		return $parsed;
	}
	public function doMail($recaptchaResult, $address, $name, $message) {
		$result = "Email settings not configured properly.";
		$path = "../email.json";
		$errorMessage = null;
		if($recaptchaResult->success === false) {
			$errorMessage = "<h4>The Recaptcha did not verify: ";
			if($recaptchaResult->errorCodes !== null) {
				$_g = 0;
				$_g1 = $recaptchaResult->errorCodes;
				while($_g < $_g1->length) {
					$e = $_g1[$_g];
					$_g = $_g + 1;
					$errorMessage1 = Std::string($e);
					$errorMessage = _hx_string_or_null($errorMessage) . _hx_string_or_null($errorMessage1);
					unset($errorMessage1,$e);
				}
			}
			$errorMessage = _hx_string_or_null($errorMessage) . "</h4>";
			return ufront_core_SurpriseTools::asBadSurprise(new tink_core_TypedError(null, $errorMessage, _hx_anonymous(array("fileName" => "MailApi.hx", "lineNumber" => 45, "className" => "api.MailApi", "methodName" => "doMail"))));
		}
		if($name === "") {
			$errorMessage = "<h4>No name?</h4>";
			return ufront_core_SurpriseTools::asBadSurprise(new tink_core_TypedError(null, $errorMessage, _hx_anonymous(array("fileName" => "MailApi.hx", "lineNumber" => 49, "className" => "api.MailApi", "methodName" => "doMail"))));
		}
		if($message === "") {
			$errorMessage = "<h4>The strong, silent type eh?</h4>";
			return ufront_core_SurpriseTools::asBadSurprise(new tink_core_TypedError(null, $errorMessage, _hx_anonymous(array("fileName" => "MailApi.hx", "lineNumber" => 53, "className" => "api.MailApi", "methodName" => "doMail"))));
		}
		$theJson = null;
		if(file_exists($path)) {
			$theJson = sys_io_File::getContent($path);
		}
		if($theJson === null) {
			return ufront_core_SurpriseTools::asBadSurprise(new tink_core_TypedError(null, $result, _hx_anonymous(array("fileName" => "MailApi.hx", "lineNumber" => 60, "className" => "api.MailApi", "methodName" => "doMail"))));
		}
		$settings = $this->parseEmailJson($theJson);
		$mailer = new ufront_mailer_SmtpMailer($settings);
		$email = null;
		$tmp = strlen($message) === 0;
		try {
			$email1 = _hx_deref(new ufront_mail_Email())->setSubject("Confidant web form submission");
			$email2 = $email1->from(ufront_mail__EmailAddress_EmailAddress_Impl_::_new($address, null));
			$email3 = $email2->to(ufront_mail__EmailAddress_EmailAddress_Impl_::_new($settings->recipient, null), null);
			$email = $email3->setText("You received a message from " . _hx_string_or_null($name) . ": " . _hx_string_or_null($message));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$errorMessage = $e1;
				$errorMessage = "<h4>" . _hx_string_or_null($errorMessage) . "</h4>";
				return ufront_core_SurpriseTools::asBadSurprise(new tink_core_TypedError(null, $errorMessage, _hx_anonymous(array("fileName" => "MailApi.hx", "lineNumber" => 76, "className" => "api.MailApi", "methodName" => "doMail"))));
			}
		}
		{
			$this1 = $mailer->send($email);
			call_user_func_array($this1, array(array(new _hx_lambda(array(&$errorMessage, &$result), "api_MailApi_0"), 'execute')));
		}
		return ufront_core_SurpriseTools::asGoodSurprise($result);
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	function __toString() { return 'api.MailApi'; }
}
api_MailApi::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("asyncApi" => (new _hx_array(array("api.AsyncMailApi"))))), "fields" => _hx_anonymous(array("doMail" => _hx_anonymous(array("returnType" => (new _hx_array(array(3)))))))));
function api_MailApi_0(&$errorMessage, &$result, $res) {
	{
		switch($res->index) {
		case 0:{
			$result = "<h4 class=\"formResult\">Email sent!</h4>";
		}break;
		case 1:{
			$e2 = _hx_deref($res)->params[0];
			{
				$errorMessage = $e2;
				$result = "<h4 class=\"formResult\">Something went wrong: " . _hx_string_or_null($errorMessage) . "</h4>";
			}
		}break;
		}
	}
}
