<?php

// Generated by Haxe 3.4.4
class haxe__Int32_Int32_Impl_ {
	public function __construct(){}
	static function preIncrement($this1) {
		$this1 = $this1 + 1;
		$this1 = $this1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		return $this1;
	}
	static function postIncrement($this1) {
		$this1 = $this1 + 1;
		$ret = $this1 - 1;
		$this1 = $this1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		return $ret;
	}
	static function preDecrement($this1) {
		$this1 = $this1 - 1;
		$this1 = $this1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		return $this1;
	}
	static function postDecrement($this1) {
		$this1 = $this1 - 1;
		$ret = $this1 + 1;
		$this1 = $this1 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		return $ret;
	}
	static function add($a, $b) {
		return $a + $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function addInt($a, $b) {
		return $a + $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function sub($a, $b) {
		return $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function subInt($a, $b) {
		return $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function intSub($a, $b) {
		return $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function mul($a, $b) {
		return $a * ($b & 65535) + ($a * (_hx_shift_right($b, 16)) << 16 << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits) << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function mulInt($a, $b) {
		return haxe__Int32_Int32_Impl_::mul($a, $b);
	}
	static function shl($a, $b) {
		return $a << $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function shlInt($a, $b) {
		return $a << $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function intShl($a, $b) {
		return $a << $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	static function toFloat($this1) {
		return $this1;
	}
	static function ucompare($a, $b) {
		if($a < 0) {
			if($b < 0) {
				return ~$b - ~$a << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
			} else {
				return 1;
			}
		}
		if($b < 0) {
			return -1;
		} else {
			return $a - $b << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
		}
	}
	static $extraBits;
	static function clamp($x) {
		return $x << haxe__Int32_Int32_Impl_::$extraBits >> haxe__Int32_Int32_Impl_::$extraBits;
	}
	function __toString() { return 'haxe._Int32.Int32_Impl_'; }
}
haxe__Int32_Int32_Impl_::$extraBits = PHP_INT_SIZE * 8 - 32;
