<?php

// Generated by Haxe 3.4.4
class haxe_ds_BalancedTree {
	public function __construct() {
		;
	}
	public $root;
	public function set($key, $value) {
		$this->root = $this->setLoop($key, $value, $this->root);
	}
	public function get($key) {
		$node = $this->root;
		while($node !== null) {
			$c = $this->compare($key, $node->key);
			if($c === 0) {
				return $node->value;
			}
			if($c < 0) {
				$node = $node->left;
			} else {
				$node = $node->right;
			}
			unset($c);
		}
		return null;
	}
	public function remove($key) {
		try {
			$this->root = $this->removeLoop($key, $this->root);
			return true;
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(is_string($e = $_ex_)){
				return false;
			} else throw $__hx__e;;
		}
	}
	public function exists($key) {
		$node = $this->root;
		while($node !== null) {
			$c = $this->compare($key, $node->key);
			if($c === 0) {
				return true;
			} else {
				if($c < 0) {
					$node = $node->left;
				} else {
					$node = $node->right;
				}
			}
			unset($c);
		}
		return false;
	}
	public function iterator() {
		$ret = (new _hx_array(array()));
		$this->iteratorLoop($this->root, $ret);
		return $ret->iterator();
	}
	public function keys() {
		$ret = (new _hx_array(array()));
		$this->keysLoop($this->root, $ret);
		return $ret->iterator();
	}
	public function setLoop($k, $v, $node) {
		if($node === null) {
			return new haxe_ds_TreeNode(null, $k, $v, null, null);
		}
		$c = $this->compare($k, $node->key);
		if($c === 0) {
			$tmp = null;
			if($node === null) {
				$tmp = 0;
			} else {
				$tmp = $node->_height;
			}
			return new haxe_ds_TreeNode($node->left, $k, $v, $node->right, $tmp);
		} else {
			if($c < 0) {
				$nl = $this->setLoop($k, $v, $node->left);
				return $this->balance($nl, $node->key, $node->value, $node->right);
			} else {
				$nr = $this->setLoop($k, $v, $node->right);
				return $this->balance($node->left, $node->key, $node->value, $nr);
			}
		}
	}
	public function removeLoop($k, $node) {
		if($node === null) {
			throw new HException("Not_found");
		}
		$c = $this->compare($k, $node->key);
		if($c === 0) {
			return $this->merge($node->left, $node->right);
		} else {
			if($c < 0) {
				$tmp = $this->removeLoop($k, $node->left);
				return $this->balance($tmp, $node->key, $node->value, $node->right);
			} else {
				$node1 = $node->left;
				$node2 = $node->key;
				$node3 = $node->value;
				return $this->balance($node1, $node2, $node3, $this->removeLoop($k, $node->right));
			}
		}
	}
	public function iteratorLoop($node, $acc) {
		if($node !== null) {
			$this->iteratorLoop($node->left, $acc);
			$acc->push($node->value);
			$this->iteratorLoop($node->right, $acc);
		}
	}
	public function keysLoop($node, $acc) {
		if($node !== null) {
			$this->keysLoop($node->left, $acc);
			$acc->push($node->key);
			$this->keysLoop($node->right, $acc);
		}
	}
	public function merge($t1, $t2) {
		if($t1 === null) {
			return $t2;
		}
		if($t2 === null) {
			return $t1;
		}
		$t = $this->minBinding($t2);
		$t3 = $t->key;
		$t4 = $t->value;
		return $this->balance($t1, $t3, $t4, $this->removeMinBinding($t2));
	}
	public function minBinding($t) {
		if($t === null) {
			throw new HException("Not_found");
		} else {
			if($t->left === null) {
				return $t;
			} else {
				return $this->minBinding($t->left);
			}
		}
	}
	public function removeMinBinding($t) {
		if($t->left === null) {
			return $t->right;
		} else {
			$tmp = $this->removeMinBinding($t->left);
			return $this->balance($tmp, $t->key, $t->value, $t->right);
		}
	}
	public function balance($l, $k, $v, $r) {
		$hl = null;
		if($l === null) {
			$hl = 0;
		} else {
			$hl = $l->_height;
		}
		$hr = null;
		if($r === null) {
			$hr = 0;
		} else {
			$hr = $r->_height;
		}
		if($hl > $hr + 2) {
			$_this = $l->left;
			$tmp = null;
			if($_this === null) {
				$tmp = 0;
			} else {
				$tmp = $_this->_height;
			}
			$_this1 = $l->right;
			$tmp1 = null;
			if($_this1 === null) {
				$tmp1 = 0;
			} else {
				$tmp1 = $_this1->_height;
			}
			if($tmp >= $tmp1) {
				$l1 = $l->left;
				$l2 = $l->key;
				$l3 = $l->value;
				return new haxe_ds_TreeNode($l1, $l2, $l3, new haxe_ds_TreeNode($l->right, $k, $v, $r, null), null);
			} else {
				$tmp2 = new haxe_ds_TreeNode($l->left, $l->key, $l->value, $l->right->left, null);
				$l4 = $l->right->key;
				$l5 = $l->right->value;
				return new haxe_ds_TreeNode($tmp2, $l4, $l5, new haxe_ds_TreeNode($l->right->right, $k, $v, $r, null), null);
			}
		} else {
			if($hr > $hl + 2) {
				$_this2 = $r->right;
				$tmp3 = null;
				if($_this2 === null) {
					$tmp3 = 0;
				} else {
					$tmp3 = $_this2->_height;
				}
				$_this3 = $r->left;
				$tmp4 = null;
				if($_this3 === null) {
					$tmp4 = 0;
				} else {
					$tmp4 = $_this3->_height;
				}
				if($tmp3 > $tmp4) {
					return new haxe_ds_TreeNode(new haxe_ds_TreeNode($l, $k, $v, $r->left, null), $r->key, $r->value, $r->right, null);
				} else {
					$tmp5 = new haxe_ds_TreeNode($l, $k, $v, $r->left->left, null);
					$r1 = $r->left->key;
					$r2 = $r->left->value;
					return new haxe_ds_TreeNode($tmp5, $r1, $r2, new haxe_ds_TreeNode($r->left->right, $r->key, $r->value, $r->right, null), null);
				}
			} else {
				$tmp6 = null;
				if($hl > $hr) {
					$tmp6 = $hl;
				} else {
					$tmp6 = $hr;
				}
				return new haxe_ds_TreeNode($l, $k, $v, $r, $tmp6 + 1);
			}
		}
	}
	public function compare($k1, $k2) {
		return Reflect::compare($k1, $k2);
	}
	public function toString() {
		if($this->root === null) {
			return "{}";
		} else {
			return "{" . _hx_string_or_null($this->root->toString()) . "}";
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
