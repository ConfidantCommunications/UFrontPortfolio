<?php

// Generated by Haxe 3.4.4
class haxe_ds_StringMap implements haxe_IMap, IteratorAggregate{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->h = array();
	}}
	public $h;
	public function set($key, $value) {
		$this->h[$key] = $value;
	}
	public function get($key) {
		if(array_key_exists($key, $this->h)) {
			return $this->h[$key];
		} else {
			return null;
		}
	}
	public function exists($key) {
		return array_key_exists($key, $this->h);
	}
	public function remove($key) {
		if(array_key_exists($key, $this->h)) {
			unset($this->h[$key]);
			return true;
		} else {
			return false;
		}
	}
	public function keys() {
		return new _hx_array_iterator(array_map("strval", array_keys($this->h)));
	}
	public function iterator() {
		return new _hx_array_iterator(array_values($this->h));
	}
	public function toString() {
		$s = "{";
		$it = $this->keys();
		{
			$i = $it;
			while($i->hasNext()) {
				$i1 = $i->next();
				$s = _hx_string_or_null($s) . _hx_string_or_null($i1);
				$s = _hx_string_or_null($s) . " => ";
				$s = _hx_string_or_null($s) . Std::string($this->get($i1));
				if($it->hasNext()) {
					$s = _hx_string_or_null($s) . ", ";
				}
				unset($i1);
			}
		}
		return _hx_string_or_null($s) . "}";
	}
	public function getIterator() {
		return $this->iterator();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
