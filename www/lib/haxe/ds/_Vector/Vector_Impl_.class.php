<?php

// Generated by Haxe 3.4.4
class haxe_ds__Vector_Vector_Impl_ {
	public function __construct(){}
	static function _new($length) {
		$this1 = (new _hx_array(array()));
		$this1->length = $length;
		return $this1;
	}
	static function get($this1, $index) {
		return $this1[$index];
	}
	static function set($this1, $index, $val) {
		return $this1[$index] = $val;
	}
	static function get_length($this1) {
		return $this1->length;
	}
	static function blit($src, $srcPos, $dest, $destPos, $len) {
		if($src === $dest) {
			if($srcPos < $destPos) {
				$i = $srcPos + $len;
				$j = $destPos + $len;
				{
					$_g1 = 0;
					$_g = $len;
					while($_g1 < $_g) {
						$_g1 = $_g1 + 1;
						$k = $_g1 - 1;
						$i = $i - 1;
						$j = $j - 1;
						$src[$j] = $src[$i];
						unset($k);
					}
				}
			} else {
				if($srcPos > $destPos) {
					$i1 = $srcPos;
					$j1 = $destPos;
					{
						$_g11 = 0;
						$_g2 = $len;
						while($_g11 < $_g2) {
							$_g11 = $_g11 + 1;
							$k1 = $_g11 - 1;
							$src[$j1] = $src[$i1];
							$i1 = $i1 + 1;
							$j1 = $j1 + 1;
							unset($k1);
						}
					}
				}
			}
		} else {
			$_g12 = 0;
			$_g3 = $len;
			while($_g12 < $_g3) {
				$_g12 = $_g12 + 1;
				$i2 = $_g12 - 1;
				$dest[$destPos + $i2] = $src[$srcPos + $i2];
				unset($i2);
			}
		}
	}
	static function toArray($this1) {
		$a = new _hx_array(array());
		$len = $this1->length;
		{
			$_g1 = 0;
			$_g = $len;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$a[$i] = $this1[$i];
				unset($i);
			}
		}
		return $a;
	}
	static function toData($this1) {
		return $this1;
	}
	static function fromData($data) {
		return $data;
	}
	static function fromArrayCopy($array) {
		$this1 = (new _hx_array(array()));
		$this1->length = $array->length;
		$vec = $this1;
		{
			$_g1 = 0;
			$_g = $array->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$vec[$i] = $array[$i];
				unset($i);
			}
		}
		return $vec;
	}
	static function copy($this1) {
		$this2 = (new _hx_array(array()));
		$this2->length = $this1->length;
		$r = $this2;
		haxe_ds__Vector_Vector_Impl_::blit($this1, 0, $r, 0, $this1->length);
		return $r;
	}
	static function join($this1, $sep) {
		$b = new StringBuf();
		$i = 0;
		$len = $this1->length;
		{
			$_g1 = 0;
			$_g = $len;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i1 = $_g1 - 1;
				$b->add(Std::string($this1[$i1]));
				if($i1 < $len - 1) {
					$b->add($sep);
				}
				unset($i1);
			}
		}
		return $b->b;
	}
	static function map($this1, $f) {
		$length = $this1->length;
		$this2 = (new _hx_array(array()));
		$this2->length = $length;
		$r = $this2;
		$i = 0;
		$len = $length;
		{
			$_g1 = 0;
			$_g = $len;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i1 = $_g1 - 1;
				$v = call_user_func_array($f, array($this1[$i1]));
				$r[$i1] = $v;
				unset($v,$i1);
			}
		}
		return $r;
	}
	static function sort($this1, $f) {
		$this1->sort($f);
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'haxe.ds._Vector.Vector_Impl_'; }
}
