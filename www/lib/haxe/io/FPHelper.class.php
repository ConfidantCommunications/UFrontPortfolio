<?php

// Generated by Haxe 3.4.4
class haxe_io_FPHelper {
	public function __construct(){}
	static $i64tmp;
	static $isLittleEndian;
	static function i32ToFloat($i) {
		return _hx_array_get(unpack("f", pack("l", $i)), 1);
	}
	static function floatToI32($f) {
		return _hx_array_get(unpack("l", pack("f", $f)), 1);
	}
	static function i64ToDouble($low, $high) {
		return _hx_array_get(unpack("d", pack("ii", ((haxe_io_FPHelper::$isLittleEndian) ? $low : $high), ((haxe_io_FPHelper::$isLittleEndian) ? $high : $low))), 1);
	}
	static function doubleToI64($v) {
		$a = unpack(((haxe_io_FPHelper::$isLittleEndian) ? "V2" : "N2"), pack("d", $v));
		$i64 = haxe_io_FPHelper::$i64tmp;
		{
			{
				$x = null;
				if(haxe_io_FPHelper::$isLittleEndian) {
					$x = 1;
				} else {
					$x = 2;
				}
				$i64->low = $a[$x];
			}
			{
				$x1 = null;
				if(haxe_io_FPHelper::$isLittleEndian) {
					$x1 = 2;
				} else {
					$x1 = 1;
				}
				$i64->high = $a[$x1];
			}
		}
		return $i64;
	}
	function __toString() { return 'haxe.io.FPHelper'; }
}
haxe_io_FPHelper::$i64tmp = haxe_io_FPHelper_0();
haxe_io_FPHelper::$isLittleEndian = _hx_array_get(unpack("S", "\x01\x00"), 1) === 1;
function haxe_io_FPHelper_0() {
	{
		$x = new haxe__Int64____Int64(0, 0);
		$this1 = $x;
		return $this1;
	}
}
