<?php

// Generated by Haxe 3.4.2
class haxe_io_Input {
	public function __construct(){}
	public function readByte() {
		throw new HException("Not implemented");
	}
	public function readBytes($s, $pos, $len) {
		$k = $len;
		$b = $s->b;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $s->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		try {
			while($k > 0) {
				{
					$val = $this->readByte();
					$b->s[$pos] = chr($val);
					unset($val);
				}
				$pos = $pos + 1;
				$k = $k - 1;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($eof = $_ex_) instanceof haxe_io_Eof){} else throw $__hx__e;;
		}
		return $len - $k;
	}
	public function close() {}
	public function readAll($bufsize = null) {
		if($bufsize === null) {
			$bufsize = 8192;
		}
		$buf = haxe_io_Bytes::alloc($bufsize);
		$total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				$len = $this->readBytes($buf, 0, $bufsize);
				if($len === 0) {
					throw new HException(haxe_io_Error::$Blocked);
				}
				{
					$tmp = null;
					if($len >= 0) {
						$tmp = $len > $buf->length;
					} else {
						$tmp = true;
					}
					if($tmp) {
						throw new HException(haxe_io_Error::$OutsideBounds);
					}
					$total1 = $total;
					$total2 = $total1->b;
					$this1 = $buf->b;
					$x = new php__BytesData_Wrapper(substr($this1->s, 0, $len));
					$this2 = $x;
					$total1->b = _hx_string_or_null($total2) . _hx_string_or_null($this2->s);
					unset($x,$total2,$total1,$tmp,$this2,$this1);
				}
				unset($len);
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof haxe_io_Eof){} else throw $__hx__e;;
		}
		return $total->getBytes();
	}
	public function read($nbytes) {
		$s = haxe_io_Bytes::alloc($nbytes);
		$p = 0;
		while($nbytes > 0) {
			$k = $this->readBytes($s, $p, $nbytes);
			if($k === 0) {
				throw new HException(haxe_io_Error::$Blocked);
			}
			$p = $p + $k;
			$nbytes = $nbytes - $k;
			unset($k);
		}
		return $s;
	}
	function __toString() { return 'haxe.io.Input'; }
}
