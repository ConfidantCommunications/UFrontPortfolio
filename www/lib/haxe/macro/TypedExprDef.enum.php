<?php

// Generated by Haxe 3.4.4
class haxe_macro_TypedExprDef extends Enum {
	public static function TArray($e1, $e2) { return new haxe_macro_TypedExprDef("TArray", 2, array($e1, $e2)); }
	public static function TArrayDecl($el) { return new haxe_macro_TypedExprDef("TArrayDecl", 8, array($el)); }
	public static function TBinop($op, $e1, $e2) { return new haxe_macro_TypedExprDef("TBinop", 3, array($op, $e1, $e2)); }
	public static function TBlock($el) { return new haxe_macro_TypedExprDef("TBlock", 14, array($el)); }
	public static $TBreak;
	public static function TCall($e, $el) { return new haxe_macro_TypedExprDef("TCall", 9, array($e, $el)); }
	public static function TCast($e, $m) { return new haxe_macro_TypedExprDef("TCast", 24, array($e, $m)); }
	public static function TConst($c) { return new haxe_macro_TypedExprDef("TConst", 0, array($c)); }
	public static $TContinue;
	public static function TEnumParameter($e1, $ef, $index) { return new haxe_macro_TypedExprDef("TEnumParameter", 26, array($e1, $ef, $index)); }
	public static function TField($e, $fa) { return new haxe_macro_TypedExprDef("TField", 4, array($e, $fa)); }
	public static function TFor($v, $e1, $e2) { return new haxe_macro_TypedExprDef("TFor", 15, array($v, $e1, $e2)); }
	public static function TFunction($tfunc) { return new haxe_macro_TypedExprDef("TFunction", 12, array($tfunc)); }
	public static function TIf($econd, $eif, $eelse) { return new haxe_macro_TypedExprDef("TIf", 16, array($econd, $eif, $eelse)); }
	public static function TLocal($v) { return new haxe_macro_TypedExprDef("TLocal", 1, array($v)); }
	public static function TMeta($m, $e1) { return new haxe_macro_TypedExprDef("TMeta", 25, array($m, $e1)); }
	public static function TNew($c, $params, $el) { return new haxe_macro_TypedExprDef("TNew", 10, array($c, $params, $el)); }
	public static function TObjectDecl($fields) { return new haxe_macro_TypedExprDef("TObjectDecl", 7, array($fields)); }
	public static function TParenthesis($e) { return new haxe_macro_TypedExprDef("TParenthesis", 6, array($e)); }
	public static function TReturn($e) { return new haxe_macro_TypedExprDef("TReturn", 20, array($e)); }
	public static function TSwitch($e, $cases, $edef) { return new haxe_macro_TypedExprDef("TSwitch", 18, array($e, $cases, $edef)); }
	public static function TThrow($e) { return new haxe_macro_TypedExprDef("TThrow", 23, array($e)); }
	public static function TTry($e, $catches) { return new haxe_macro_TypedExprDef("TTry", 19, array($e, $catches)); }
	public static function TTypeExpr($m) { return new haxe_macro_TypedExprDef("TTypeExpr", 5, array($m)); }
	public static function TUnop($op, $postFix, $e) { return new haxe_macro_TypedExprDef("TUnop", 11, array($op, $postFix, $e)); }
	public static function TVar($v, $expr) { return new haxe_macro_TypedExprDef("TVar", 13, array($v, $expr)); }
	public static function TWhile($econd, $e, $normalWhile) { return new haxe_macro_TypedExprDef("TWhile", 17, array($econd, $e, $normalWhile)); }
	public static $__constructors = array(2 => 'TArray', 8 => 'TArrayDecl', 3 => 'TBinop', 14 => 'TBlock', 21 => 'TBreak', 9 => 'TCall', 24 => 'TCast', 0 => 'TConst', 22 => 'TContinue', 26 => 'TEnumParameter', 4 => 'TField', 15 => 'TFor', 12 => 'TFunction', 16 => 'TIf', 1 => 'TLocal', 25 => 'TMeta', 10 => 'TNew', 7 => 'TObjectDecl', 6 => 'TParenthesis', 20 => 'TReturn', 18 => 'TSwitch', 23 => 'TThrow', 19 => 'TTry', 5 => 'TTypeExpr', 11 => 'TUnop', 13 => 'TVar', 17 => 'TWhile');
	}
haxe_macro_TypedExprDef::$TBreak = new haxe_macro_TypedExprDef("TBreak", 21);
haxe_macro_TypedExprDef::$TContinue = new haxe_macro_TypedExprDef("TContinue", 22);
