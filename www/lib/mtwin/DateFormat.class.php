<?php

// Generated by Haxe 3.4.4
class mtwin_DateFormat {
	public function __construct(){}
	static $REG_STD;
	static $REG_A;
	static $REG_B;
	static $REG_A2;
	static $REG_B2;
	static $REG_HOUR;
	static $REG_TZ;
	static $REG_SIMPLE_TZ;
	static $MONTH;
	static $DAY;
	static function month($s) {
		{
			$_g = 0;
			while($_g < 12) {
				$_g = $_g + 1;
				$i = $_g - 1;
				$tmp = strtolower(mtwin_DateFormat::$MONTH[$i]);
				if($tmp === strtolower($s)) {
					return $i + 1;
				}
				unset($tmp,$i);
			}
		}
		throw new HException("Unknown month: " . _hx_string_or_null($s));
	}
	static function timezone($str) {
		if(mtwin_DateFormat::$REG_SIMPLE_TZ->match($str)) {
			$h = Std::parseInt(_hx_substr($str, 0, -2));
			$m = Std::parseInt(_hx_substr($str, -2, 2));
			return _hx_anonymous(array("h" => $h, "m" => $m));
		}
		switch($str) {
		case "AST":case "D":case "EDT":{
			return _hx_anonymous(array("h" => -4, "m" => 0));
		}break;
		case "AT":case "B":{
			return _hx_anonymous(array("h" => -2, "m" => 0));
		}break;
		case "BST":case "GMT":case "UT":case "UTC":case "WET":case "Z":{
			return _hx_anonymous(array("h" => 0, "m" => 0));
		}break;
		case "ADT":case "C":{
			return _hx_anonymous(array("h" => -3, "m" => 0));
		}break;
		case "AHST":case "CAT":case "HST":case "K":{
			return _hx_anonymous(array("h" => -10, "m" => 0));
		}break;
		case "CDT":case "E":case "EST":{
			return _hx_anonymous(array("h" => 5, "m" => 0));
		}break;
		case "EAST":case "GST":case "W":{
			return _hx_anonymous(array("h" => 10, "m" => 0));
		}break;
		case "IDLW":case "M":{
			return _hx_anonymous(array("h" => -12, "m" => 0));
		}break;
		case "CST":case "F":case "MDT":{
			return _hx_anonymous(array("h" => -6, "m" => 0));
		}break;
		case "EET":case "FST":case "MEST":case "MESZ":case "O":case "SST":case "ZP2":{
			return _hx_anonymous(array("h" => 2, "m" => 0));
		}break;
		case "G":case "MST":case "PDT":{
			return _hx_anonymous(array("h" => -7, "m" => 0));
		}break;
		case "L":case "NT":{
			return _hx_anonymous(array("h" => -11, "m" => 0));
		}break;
		case "IDLE":case "NST":case "NZST":case "Y":{
			return _hx_anonymous(array("h" => 12, "m" => 0));
		}break;
		case "BT":case "P":case "ZP3":{
			return _hx_anonymous(array("h" => 3, "m" => 0));
		}break;
		case "CET":case "FWT":case "MET":case "MEWT":case "N":case "SWT":{
			return _hx_anonymous(array("h" => 1, "m" => 0));
		}break;
		case "CCT":case "U":case "ZP8":{
			return _hx_anonymous(array("h" => 8, "m" => 0));
		}break;
		case "JST":case "V":case "ZP9":{
			return _hx_anonymous(array("h" => 9, "m" => 0));
		}break;
		case "A":case "WAT":{
			return _hx_anonymous(array("h" => -1, "m" => 0));
		}break;
		case "X":{
			return _hx_anonymous(array("h" => 11, "m" => 0));
		}break;
		case "H":case "PST":case "YDT":{
			return _hx_anonymous(array("h" => -8, "m" => 0));
		}break;
		case "HDT":case "I":case "YST":{
			return _hx_anonymous(array("h" => -9, "m" => 0));
		}break;
		case "Q":case "ZP4":{
			return _hx_anonymous(array("h" => 4, "m" => 0));
		}break;
		case "R":case "ZP5":{
			return _hx_anonymous(array("h" => 5, "m" => 0));
		}break;
		case "S":case "ZP6":{
			return _hx_anonymous(array("h" => 6, "m" => 0));
		}break;
		case "T":case "WAST":case "ZP7":{
			return _hx_anonymous(array("h" => 7, "m" => 0));
		}break;
		default:{
			return _hx_anonymous(array("h" => 0, "m" => 0));
		}break;
		}
	}
	static function timezoneConvert($d, $tz, $ltz = null) {
		if($ltz === null) {
			$ltz = DateTools::format(Date::now(), "%z");
		}
		$localtz = mtwin_DateFormat::timezone($ltz);
		$otz = mtwin_DateFormat::timezone($tz);
		$diff = ($localtz->h - $otz->h) * 3600 + ($localtz->m - $otz->m) * 60;
		return Date::fromTime($d->getTime() + $diff * 1000.0);
	}
	static function parse($str) {
		$h = 0;
		$i = 0;
		$s = 0;
		$y = 1970;
		$m = 1;
		$d = 1;
		if(mtwin_DateFormat::$REG_STD->match($str)) {
			$y = Std::parseInt(mtwin_DateFormat::$REG_STD->matched(1));
			$m = Std::parseInt(mtwin_DateFormat::$REG_STD->matched(2));
			$d = Std::parseInt(mtwin_DateFormat::$REG_STD->matched(3));
		} else {
			if(mtwin_DateFormat::$REG_A->match($str)) {
				$y = Std::parseInt(mtwin_DateFormat::$REG_A->matched(3));
				$d = Std::parseInt(mtwin_DateFormat::$REG_A->matched(2));
				$m = mtwin_DateFormat::month(mtwin_DateFormat::$REG_A->matched(1));
			} else {
				if(mtwin_DateFormat::$REG_B->match($str)) {
					$y = Std::parseInt(mtwin_DateFormat::$REG_B->matched(3));
					$d = Std::parseInt(mtwin_DateFormat::$REG_B->matched(1));
					$m = mtwin_DateFormat::month(mtwin_DateFormat::$REG_B->matched(2));
				} else {
					if(mtwin_DateFormat::$REG_A2->match($str)) {
						$y = Std::parseInt(mtwin_DateFormat::$REG_A2->matched(3));
						$d = Std::parseInt(mtwin_DateFormat::$REG_A2->matched(2));
						$m = mtwin_DateFormat::month(mtwin_DateFormat::$REG_A2->matched(1));
					} else {
						if(mtwin_DateFormat::$REG_B2->match($str)) {
							$y = Std::parseInt(mtwin_DateFormat::$REG_B2->matched(3));
							$d = Std::parseInt(mtwin_DateFormat::$REG_B2->matched(1));
							$m = mtwin_DateFormat::month(mtwin_DateFormat::$REG_B2->matched(2));
						} else {
							return null;
						}
					}
				}
			}
		}
		if($y < 50) {
			$y = $y + 2000;
		} else {
			if($y < 100) {
				$y = $y + 1900;
			}
		}
		if(mtwin_DateFormat::$REG_HOUR->match($str)) {
			$h = Std::parseInt(mtwin_DateFormat::$REG_HOUR->matched(1));
			$i = Std::parseInt(mtwin_DateFormat::$REG_HOUR->matched(2));
			$s = Std::parseInt(mtwin_DateFormat::$REG_HOUR->matched(3));
		}
		$ret = new Date($y, $m - 1, $d, $h, $i, $s);
		if(mtwin_DateFormat::$REG_TZ->match($str)) {
			$ret = mtwin_DateFormat::timezoneConvert($ret, mtwin_DateFormat::$REG_TZ->matched(1), null);
		}
		return $ret;
	}
	static function formatRfc822($d) {
		$month = mtwin_DateFormat::$MONTH[$d->getMonth()];
		$day = mtwin_DateFormat::$DAY[$d->getDay()];
		return DateTools::format($d, _hx_string_or_null($day) . ", %d " . _hx_string_or_null($month) . " %Y %H:%M:%S %z");
	}
	function __toString() { return 'mtwin.DateFormat'; }
}
mtwin_DateFormat::$REG_STD = new EReg("([0-9]{4})-([0-9]{2})-([0-9]{2})", "");
mtwin_DateFormat::$REG_A = new EReg("(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ([0-9]{1,2}), ([0-9]{2,4})", "");
mtwin_DateFormat::$REG_B = new EReg("([0-9]{1,2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ([0-9]{2,4})", "");
mtwin_DateFormat::$REG_A2 = new EReg("(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ([0-9]{1,2}) .*? ([0-9]{4})\$", "");
mtwin_DateFormat::$REG_B2 = new EReg("([0-9]{1,2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) .*? ([0-9]{4})\$", "");
mtwin_DateFormat::$REG_HOUR = new EReg("([0-9]{2}):([0-9]{2}):([0-9]{2})", "");
mtwin_DateFormat::$REG_TZ = new EReg("(ADT|BST|NZT|NZST|IDLE|GST|EAST|JST|CCT|WAST|BT|EET|SWT|MEWT|MET|FWT|CET|IDLW|NT|HST|CAT|AHST|YST|AST|AT|WAT|WET|UTC|UT|GMT|EST|EDT|CST|CDT|MST|MDT|PST|PDT|YDT|HDT|MEST|MESZ|SST|FST|WADT|EADT|NZDT|[+-][0-9]{3,4}|[A-Z])\$", "");
mtwin_DateFormat::$REG_SIMPLE_TZ = new EReg("[+-][0-9]{3,4}", "");
mtwin_DateFormat::$MONTH = (new _hx_array(array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")));
mtwin_DateFormat::$DAY = (new _hx_array(array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")));
