<?php

// Generated by Haxe 3.4.4
class mtwin_mail_Tools {
	public function __construct(){}
	static $BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	static $HEXA = "0123456789ABCDEF";
	static $REG_HEADER_DECODE;
	static $REG_QP_LB;
	static $REG_QP;
	static $REG_SPACES_EQUAL;
	static function chunkSplit($str, $length, $sep) {
		$ret = "";
		while(strlen($str) > $length) {
			$ret = _hx_string_or_null($ret) . _hx_string_or_null((_hx_string_or_null(_hx_substr($str, 0, $length)) . _hx_string_or_null($sep)));
			$str = _hx_substr($str, $length, strlen($str) - $length);
		}
		return _hx_string_or_null($ret) . _hx_string_or_null($str);
	}
	static function splitLines($str) {
		$ret = _hx_explode("\x0A", $str);
		{
			$_g1 = 0;
			$_g = $ret->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$l = $ret[$i];
				if(_hx_substr($l, -1, 1) === "\x0D") {
					$ret[$i] = _hx_substr($l, 0, -1);
				}
				unset($l,$i);
			}
		}
		return $ret;
	}
	static function encodeBase64($content) {
		$suffix = null;
		$_g = _hx_mod(strlen($content), 3);
		switch($_g) {
		case 1:{
			$suffix = "==";
		}break;
		case 2:{
			$suffix = "=";
		}break;
		default:{
			$suffix = "";
		}break;
		}
		$s = mtwin_mail_Tools::chunkSplit(haxe_crypto_BaseCode::encode($content, mtwin_mail_Tools::$BASE64), 76, "\x0D\x0A");
		return _hx_string_or_null(rtrim($s)) . _hx_string_or_null($suffix);
	}
	static function decodeBase64($content) {
		$content = mtwin_mail_Tools::$REG_SPACES_EQUAL->replace($content, "");
		try {
			return haxe_crypto_BaseCode::decode($content, mtwin_mail_Tools::$BASE64);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				return $content;
			}
		}
	}
	static function encodeQuotedPrintable($content) {
		$rs = new HList();
		$lines = mtwin_mail_Tools::splitLines($content);
		{
			$_g = 0;
			while($_g < $lines->length) {
				$ln = $lines[$_g];
				$_g = $_g + 1;
				$len = strlen($ln);
				$line = "";
				{
					$_g2 = 0;
					$_g1 = $len;
					while($_g2 < $_g1) {
						$_g2 = $_g2 + 1;
						$i = $_g2 - 1;
						$c = _hx_char_at($ln, $i);
						$o = _hx_char_code_at($c, 0);
						if($o !== 9) {
							if($o < 16) {
								$c = "=0" . _hx_string_or_null(haxe_crypto_BaseCode::encode($c, mtwin_mail_Tools::$HEXA));
							} else {
								$tmp = null;
								$tmp1 = null;
								if($o !== 61) {
									$tmp1 = $o < 32;
								} else {
									$tmp1 = true;
								}
								if(!$tmp1) {
									$tmp = $o > 126;
								} else {
									$tmp = true;
								}
								if($tmp) {
									$c = "=" . _hx_string_or_null(haxe_crypto_BaseCode::encode($c, mtwin_mail_Tools::$HEXA));
								}
								unset($tmp1,$tmp);
							}
						}
						if($i === $len - 1) {
							if($o === 32) {
								$c = "=20";
							} else {
								if($o === 9) {
									$c = "=09";
								}
							}
						}
						$ll = strlen($line);
						$cl = strlen($c);
						$tmp2 = null;
						if($ll + $cl >= 76) {
							if($i === $len - 1) {
								$tmp2 = $ll + $cl !== 76;
							} else {
								$tmp2 = true;
							}
						} else {
							$tmp2 = false;
						}
						if($tmp2) {
							$rs->add(_hx_string_or_null($line) . "=");
							$line = "";
						}
						$line = _hx_string_or_null($line) . _hx_string_or_null($c);
						unset($tmp2,$o,$ll,$i,$cl,$c);
					}
					unset($_g2,$_g1);
				}
				$rs->add($line);
				unset($ln,$line,$len);
			}
		}
		return $rs->join("\x0D\x0A");
	}
	static $REG_HEXA;
	static function decodeQuotedPrintable($str) {
		$str = _hx_deref(new EReg("=\x0D?\x0A", "g"))->replace($str, "");
		$a = _hx_explode("=", $str);
		$first = true;
		$ret = new StringBuf();
		{
			$_g = 0;
			while($_g < $a->length) {
				$t = $a[$_g];
				$_g = $_g + 1;
				if($first) {
					$first = false;
					$ret->add($t);
				} else {
					$h = strtoupper(_hx_substr($t, 0, 2));
					if(mtwin_mail_Tools::$REG_HEXA->match($h)) {
						$ret->add(haxe_crypto_BaseCode::decode($h, mtwin_mail_Tools::$HEXA));
						{
							$ret1 = $ret;
							$ret2 = $ret1->b;
							$ret1->b = _hx_string_or_null($ret2) . _hx_string_or_null(_hx_substr($t, 2, strlen($t) - 2));
							unset($ret2,$ret1);
						}
					} else {
						$ret->add("=");
						$ret->add($t);
					}
					unset($h);
				}
				unset($t);
			}
		}
		return $ret->b;
	}
	static function headerQpEncode($ostr, $initSize, $charset, $cleanQuote = null) {
		$str = _hx_deref(new EReg("\x0D?\x0A\\s*", ""))->replace($ostr, " ");
		if($cleanQuote) {
			if(_hx_substr($str, 0, 1) === "\"") {
				$str = _hx_substr($str, 1, strlen($str) - 1);
			}
			if(_hx_substr($str, strlen($str) - 1, 1) === "\"") {
				$str = _hx_substr($str, 0, strlen($str) - 1);
			}
		}
		$csl = strlen($charset);
		$len = strlen($str);
		$quotedStr = new HList();
		$line = new StringBuf();
		$llen = 0;
		$useQuoted = false;
		{
			$_g1 = 0;
			$_g = $len;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$c = _hx_char_at($str, $i);
				$o = _hx_char_code_at($c, 0);
				if($o !== 9) {
					if($o < 16) {
						$useQuoted = true;
						$c = "=0" . _hx_string_or_null(haxe_crypto_BaseCode::encode($c, mtwin_mail_Tools::$HEXA));
					} else {
						$tmp = null;
						$tmp1 = null;
						$tmp2 = null;
						$tmp3 = null;
						if($o !== 61) {
							$tmp3 = $o === 58;
						} else {
							$tmp3 = true;
						}
						if(!$tmp3) {
							$tmp2 = $o === 63;
						} else {
							$tmp2 = true;
						}
						if(!$tmp2) {
							$tmp1 = $o === 95;
						} else {
							$tmp1 = true;
						}
						if(!$tmp1) {
							$tmp = $o === 34;
						} else {
							$tmp = true;
						}
						if($tmp) {
							$c = "=" . _hx_string_or_null(haxe_crypto_BaseCode::encode($c, mtwin_mail_Tools::$HEXA));
						} else {
							$tmp4 = null;
							if($o >= 32) {
								$tmp4 = $o > 126;
							} else {
								$tmp4 = true;
							}
							if($tmp4) {
								$useQuoted = true;
								$c = "=" . _hx_string_or_null(haxe_crypto_BaseCode::encode($c, mtwin_mail_Tools::$HEXA));
							} else {
								if($o === 32) {
									$c = "_";
								}
							}
							unset($tmp4);
						}
						unset($tmp3,$tmp2,$tmp1,$tmp);
					}
				}
				$max = null;
				if($quotedStr->length === 0) {
					$max = 69 - $csl - $initSize;
				} else {
					$max = 69 - $csl;
				}
				$clen = strlen($c);
				if($llen + $clen >= $max) {
					$quotedStr->add($line->b);
					$line = new StringBuf();
					$llen = 0;
				}
				$line->add($c);
				$llen = $llen + $clen;
				unset($o,$max,$i,$clen,$c);
			}
		}
		$quotedStr->add($line->b);
		if(!$useQuoted) {
			return mtwin_mail_Tools::wordWrap($ostr, 75, "\x0D\x0A", $initSize, true);
		} else {
			return "=?" . _hx_string_or_null($charset) . "?Q?" . _hx_string_or_null($quotedStr->join("?=\x0D\x0A =?" . _hx_string_or_null($charset) . "?Q?")) . "?=";
		}
	}
	static function headerAddressEncode($ostr, $initSize, $charset) {
		$list = mtwin_mail_Tools::parseAddress($ostr, null);
		$lret = new HList();
		{
			$_g = 0;
			while($_g < $list->length) {
				$a = $list[$_g];
				$_g = $_g + 1;
				$ret = new StringBuf();
				$addr = $a->address;
				if($a->name !== null) {
					$name = $a->name;
					$tmp = _hx_deref(new EReg("[\\s,\"']", ""))->match($name);
					if($tmp) {
						$name = "\"" . _hx_string_or_null(_hx_explode("\"", _hx_explode("\\", $name)->join("\\\\"))->join("\\\"")) . "\"";
					}
					$t = mtwin_mail_Tools::headerQpEncode($name, $initSize, $charset, true);
					$ret->add($t);
					$p = _hx_last_index_of($t, "\x0A", null);
					if($p === -1) {
						$initSize = $initSize + strlen($t);
					} else {
						$initSize = strlen($t) - $p;
					}
					$addr = " <" . _hx_string_or_null($a->address) . ">";
					unset($tmp,$t,$p,$name);
				}
				if($initSize + strlen($addr) > 75) {
					$ret->add("\x0D\x0A ");
					$initSize = 1;
				}
				$ret->add($addr);
				$initSize = $initSize + strlen($addr);
				$lret->add($ret->b);
				unset($ret,$addr,$a);
			}
		}
		return $lret->join(", ");
	}
	static function headerComplexEncode($ostr, $initSize, $charset) {
		$e = mtwin_mail_Tools::parseComplexHeader($ostr);
		$ret = new StringBuf();
		$b = mtwin_mail_Tools::headerQpEncode($e->value, $initSize, $charset, null);
		$ret->add($b);
		{
			$k = $e->params->keys();
			while($k->hasNext()) {
				$k1 = $k->next();
				$ret->add(";");
				$initSize = $initSize + 1;
				$p = _hx_last_index_of($b, "\x0A", null);
				if($p === -1) {
					$initSize = $initSize + strlen($b);
				} else {
					$initSize = strlen($b) - $p;
				}
				if($initSize + strlen($k1) + 3 > 75) {
					$ret->add("\x0D\x0A ");
					$initSize = 1;
				} else {
					$ret->add(" ");
					$initSize = $initSize + 1;
				}
				$ret->add($k1);
				$ret->add("=\"");
				$initSize = $initSize + (strlen($k1) + 2);
				$b = mtwin_mail_Tools::headerQpEncode($e->params->get($k1), $initSize, $charset, null);
				$ret->add($b);
				$ret->add("\"");
				unset($p,$k1);
			}
		}
		return $ret->b;
	}
	static function headerDecode($str, $charsetOut) {
		$str = _hx_deref(new EReg("\x0D?\x0A\\s?", ""))->replace($str, " ");
		while(mtwin_mail_Tools::$REG_HEADER_DECODE->match($str)) {
			$s = strtolower(mtwin_mail_Tools::$REG_HEADER_DECODE->matched(2));
			$charset = trim($s);
			$s1 = strtolower(mtwin_mail_Tools::$REG_HEADER_DECODE->matched(3));
			$encoding = trim($s1);
			$s2 = mtwin_mail_Tools::$REG_HEADER_DECODE->matched(4);
			$encoded = trim($s2);
			$start = mtwin_mail_Tools::$REG_HEADER_DECODE->matched(1);
			$end = mtwin_mail_Tools::$REG_HEADER_DECODE->matched(5);
			if($encoding === "q") {
				$encoded = mtwin_mail_Tools::decodeQuotedPrintable(str_replace("_", " ", $encoded));
			} else {
				if($encoding === "b") {
					$encoded = mtwin_mail_Tools::decodeBase64($encoded);
				} else {
					throw new HException("Unknow transfer-encoding: " . _hx_string_or_null($encoding));
				}
			}
			$charsetOut = strtolower($charsetOut);
			$tmp = null;
			if($charsetOut !== "utf-8") {
				$tmp = $charset === "utf-8";
			} else {
				$tmp = false;
			}
			if($tmp) {
				try {
					$encoded = haxe_Utf8::decode($encoded);
				}catch(Exception $__hx__e) {
					$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
					$e = $_ex_;
					{
						$encoded = $encoded;
					}
				}
				unset($e);
			} else {
				$tmp1 = null;
				if($charset !== "utf-8") {
					$tmp1 = $charsetOut === "utf-8";
				} else {
					$tmp1 = false;
				}
				if($tmp1) {
					try {
						$encoded = haxe_Utf8::encode($encoded);
					}catch(Exception $__hx__e) {
						$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
						$e1 = $_ex_;
						{
							$encoded = $encoded;
						}
					}
					unset($e1);
				}
				unset($tmp1);
			}
			$str = _hx_string_or_null($start) . _hx_string_or_null($encoded) . _hx_string_or_null($end);
			unset($tmp,$start,$s2,$s1,$s,$end,$encoding,$encoded,$charset);
		}
		return $str;
	}
	static function removeCRLF($str) {
		$s = str_replace("\x0A", "", $str);
		return str_replace("\x0D", "", $s);
	}
	static function formatHeaderTitle($str) {
		$str = trim($str);
		if(strtolower($str) === "mime-version") {
			return "MIME-Version";
		}
		$arr = _hx_explode("-", $str);
		{
			$_g1 = 0;
			$_g = $arr->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$t = $arr[$i];
				$tmp = strtoupper(_hx_substr($t, 0, 1));
				$arr[$i] = _hx_string_or_null($tmp) . _hx_string_or_null(strtolower(_hx_substr($t, 1, strlen($t) - 1)));
				unset($tmp,$t,$i);
			}
		}
		return $arr->join("-");
	}
	static function randomEight() {
		$s = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		$ret = "";
		{
			$_g = 0;
			while($_g < 8) {
				$_g = $_g + 1;
				$i = $_g - 1;
				$ret = _hx_string_or_null($ret) . _hx_string_or_null(_hx_char_at($s, Std::random(strlen($s))));
				unset($i);
			}
		}
		return $ret;
	}
	static function pregQuote($str) {
		$str = str_replace("\\", "\\\\", $str);
		$str = str_replace(".", "\\.", $str);
		$str = str_replace("+", "\\+", $str);
		$str = str_replace("*", "\\*", $str);
		$str = str_replace("?", "\\?", $str);
		$str = str_replace("^", "\\^", $str);
		$str = str_replace(")", "\\)", $str);
		$str = str_replace("(", "\\(", $str);
		$str = str_replace("[", "\\[", $str);
		$str = str_replace("]", "\\]", $str);
		$str = str_replace("{", "\\{", $str);
		$str = str_replace("}", "\\}", $str);
		$str = str_replace("=", "\\=", $str);
		$str = str_replace("!", "\\!", $str);
		$str = str_replace("<", "\\<", $str);
		$str = str_replace(">", "\\>", $str);
		$str = str_replace("|", "\\|", $str);
		$str = str_replace(":", "\\:", $str);
		$str = str_replace("\$", "\\\$", $str);
		$str = str_replace("/", "\\/", $str);
		return $str;
	}
	static function formatHeader($name, $content, $charset) {
		$lname = strtolower($name);
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		if($lname !== "to") {
			$tmp2 = $lname === "from";
		} else {
			$tmp2 = true;
		}
		if(!$tmp2) {
			$tmp1 = $lname === "cc";
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $lname === "bcc";
		} else {
			$tmp = true;
		}
		if($tmp) {
			return _hx_string_or_null($name) . ": " . _hx_string_or_null(mtwin_mail_Tools::headerAddressEncode($content, strlen($name) + 2, $charset)) . "\x0D\x0A";
		} else {
			if(_hx_substr($lname, 0, 8) === "content-") {
				return _hx_string_or_null($name) . ": " . _hx_string_or_null(mtwin_mail_Tools::headerComplexEncode($content, strlen($name) + 2, $charset)) . "\x0D\x0A";
			} else {
				return _hx_string_or_null($name) . ": " . _hx_string_or_null(mtwin_mail_Tools::headerQpEncode($content, strlen($name) + 2, $charset, null)) . "\x0D\x0A";
			}
		}
	}
	static $REG_MHEADER;
	static $REG_PARAM1;
	static $REG_PARAM2;
	static function parseComplexHeader($h) {
		if($h === null) {
			return null;
		}
		$ret = _hx_anonymous(array("value" => null, "params" => new haxe_ds_StringMap()));
		if(mtwin_mail_Tools::$REG_MHEADER->match($h)) {
			$s = mtwin_mail_Tools::$REG_MHEADER->matched(1);
			$ret->value = trim($s);
			$params = mtwin_mail_Tools::$REG_MHEADER->matched(2);
			while(strlen($params) > 0) {
				$params = ltrim($params);
				if(mtwin_mail_Tools::$REG_PARAM1->match($params)) {
					$s1 = mtwin_mail_Tools::$REG_PARAM1->matched(1);
					$k = trim($s1);
					$k1 = strtolower($k);
					$v = mtwin_mail_Tools::$REG_PARAM1->matched(2);
					$ret->params->set($k1, $v);
					$params = mtwin_mail_Tools::$REG_PARAM1->matchedRight();
					unset($v,$s1,$k1,$k);
				} else {
					if(mtwin_mail_Tools::$REG_PARAM2->match($params)) {
						$s2 = mtwin_mail_Tools::$REG_PARAM2->matched(1);
						$k2 = trim($s2);
						$k3 = strtolower($k2);
						$s3 = mtwin_mail_Tools::$REG_PARAM2->matched(2);
						$v1 = trim($s3);
						$ret->params->set($k3, $v1);
						$params = mtwin_mail_Tools::$REG_PARAM2->matchedRight();
						unset($v1,$s3,$s2,$k3,$k2);
					} else {
						break;
					}
				}
			}
		} else {
			$ret->value = $h;
		}
		return $ret;
	}
	static function wordWrap($str, $length = null, $sep = null, $initCur = null, $keepSpace = null) {
		if($length === null) {
			$length = 75;
		}
		if($sep === null) {
			$sep = "\x0A";
		}
		if($initCur === null) {
			$initCur = 0;
		}
		if($keepSpace === null) {
			$keepSpace = false;
		}
		$reg = new EReg("(.*?)(\\s+)", "");
		$a = new _hx_array(array());
		while($reg->match($str)) {
			$c = $reg->matched(1);
			$s = $reg->matched(2);
			$l = strlen($c) + strlen($s);
			$a->push($c);
			$a->push($s);
			$str = _hx_substr($str, $l, strlen($str) - $l);
			unset($s,$l,$c);
		}
		$a->push($str);
		$sb = new StringBuf();
		$cur = $initCur;
		$n = $a[0];
		{
			$_g1 = 0;
			$_g = $a->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$e = $n;
				$n = $a[$i + 1];
				$cut = false;
				$tmp = null;
				if(_hx_mod($i, 2) === 1) {
					$tmp = $cur + strlen($e) + strlen($n) > $length;
				} else {
					$tmp = false;
				}
				if($tmp) {
					$cut = true;
					if($keepSpace) {
						{
							$_g3 = 0;
							$_g2 = strlen($e) - 1;
							while($_g3 < $_g2) {
								$_g3 = $_g3 + 1;
								$is = $_g3 - 1;
								if($cur >= $length) {
									$sb->add($sep);
									$cur = 0;
								}
								$sb1 = $sb;
								$sb2 = $sb1->b;
								$sb1->b = _hx_string_or_null($sb2) . _hx_string_or_null(_hx_substr($e, $is, 1));
								$cur = $cur + 1;
								unset($sb2,$sb1,$is);
							}
							unset($_g3,$_g2);
						}
						if($cur + 1 + strlen($n) > $length) {
							$sb->add($sep);
							$cur = 0;
						}
						$sb->add(_hx_substr($e, -1, 1));
						$cur = $cur + 1;
					} else {
						$sb->add($sep);
						$cur = 0;
					}
				}
				$tmp1 = null;
				if(_hx_mod($i, 2) === 1) {
					$tmp1 = !$cut;
				} else {
					$tmp1 = true;
				}
				if($tmp1) {
					$sb->add($e);
					$cur = $cur + strlen($e);
				}
				unset($tmp1,$tmp,$i,$e,$cut);
			}
		}
		return $sb->b;
	}
	static $REG_ADDRESS;
	static $REG_ROUTE_ADDR;
	static $REG_ATOM;
	static $REG_QSTRING;
	static $REG_COMMENT;
	static $REG_SEPARATOR;
	static function parseAddress($str, $vrfy = null) {
		if($vrfy === null) {
			$vrfy = true;
		}
		$a = new _hx_array(array());
		$name = null;
		$address = null;
		$str = trim($str);
		$s = $str;
		while(strlen($s) > 0) {
			$s = ltrim($s);
			if(mtwin_mail_Tools::$REG_QSTRING->match($s)) {
				$t = mtwin_mail_Tools::$REG_QSTRING->matched(1);
				$t = _hx_deref(new EReg("\\\\(.)", "g"))->replace($t, "\$1");
				if($name !== null) {
					$name = _hx_string_or_null($name) . " ";
				} else {
					$name = "";
				}
				$name = _hx_string_or_null($name) . _hx_string_or_null($t);
				$s = mtwin_mail_Tools::$REG_QSTRING->matchedRight();
				unset($t);
			} else {
				if(mtwin_mail_Tools::$REG_ADDRESS->match($s)) {
					$tmp = null;
					if($address !== null) {
						$tmp = $vrfy;
					} else {
						$tmp = false;
					}
					if($tmp) {
						throw new HException(mtwin_mail_Exception::ParseError(_hx_string_or_null($str) . ", near: " . _hx_string_or_null(_hx_substr($s, 0, 15))));
					}
					$address = mtwin_mail_Tools::$REG_ADDRESS->matched(1);
					$s = mtwin_mail_Tools::$REG_ADDRESS->matchedRight();
					unset($tmp);
				} else {
					if(mtwin_mail_Tools::$REG_ROUTE_ADDR->match($s)) {
						if($address !== null) {
							if($name !== null) {
								$name = _hx_string_or_null($name) . " " . _hx_string_or_null($address);
							} else {
								$name = $address;
							}
						}
						$address = mtwin_mail_Tools::$REG_ROUTE_ADDR->matched(1);
						$s = mtwin_mail_Tools::$REG_ROUTE_ADDR->matchedRight();
					} else {
						if(mtwin_mail_Tools::$REG_ATOM->match($s)) {
							if($name !== null) {
								$name = _hx_string_or_null($name) . " ";
							} else {
								$name = "";
							}
							$name = _hx_string_or_null($name) . _hx_string_or_null(mtwin_mail_Tools::$REG_ATOM->matched(1));
							$s = mtwin_mail_Tools::$REG_ATOM->matchedRight();
						} else {
							if(mtwin_mail_Tools::$REG_COMMENT->match($s)) {
								if($name !== null) {
									$name = _hx_string_or_null($name) . " ";
								} else {
									$name = "";
								}
								$name = _hx_string_or_null($name) . _hx_string_or_null(mtwin_mail_Tools::$REG_COMMENT->matched(1));
								$s = mtwin_mail_Tools::$REG_COMMENT->matchedRight();
							} else {
								if(mtwin_mail_Tools::$REG_SEPARATOR->match($s)) {
									if($address !== null) {
										$tmp1 = null;
										$tmp2 = null;
										if($name !== null) {
											$tmp2 = strlen($name) > 0;
										} else {
											$tmp2 = false;
										}
										if($tmp2) {
											$tmp1 = $name;
										} else {
											$tmp1 = null;
										}
										$a->push(_hx_anonymous(array("name" => $tmp1, "address" => $address)));
										$address = null;
										$name = null;
										unset($tmp2,$tmp1);
									}
									$s = mtwin_mail_Tools::$REG_SEPARATOR->matchedRight();
								} else {
									if($vrfy) {
										throw new HException(mtwin_mail_Exception::ParseError(_hx_string_or_null($str) . ", near: " . _hx_string_or_null(_hx_substr($s, 0, 15))));
									} else {
										break;
									}
								}
							}
						}
					}
				}
			}
		}
		if($address !== null) {
			$tmp3 = null;
			$tmp4 = null;
			if($name !== null) {
				$tmp4 = strlen($name) > 0;
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$tmp3 = $name;
			} else {
				$tmp3 = null;
			}
			$a->push(_hx_anonymous(array("name" => $tmp3, "address" => $address)));
		}
		if($a->length === 0) {
			if($vrfy) {
				throw new HException(mtwin_mail_Exception::ParseError(_hx_string_or_null($str) . ", no address found"));
			} else {
				$a->push(_hx_anonymous(array("name" => null, "address" => null)));
			}
		}
		return $a;
	}
	static function formatAddress($a) {
		$r = new HList();
		{
			$_g = 0;
			while($_g < $a->length) {
				$c = $a[$_g];
				$_g = $_g + 1;
				$tmp = null;
				if($c->name !== null) {
					$tmp = $c->name === "";
				} else {
					$tmp = true;
				}
				if($tmp) {
					$r->add($c->address);
				} else {
					$tmp1 = _hx_deref(new EReg("^[A-Z0-9 ]*\$", "i"))->match($c->name);
					if($tmp1) {
						$r->add(_hx_string_or_null($c->name) . " <" . _hx_string_or_null($c->address) . ">");
					} else {
						$quoted = _hx_explode("\"", _hx_explode("\\", $c->name)->join("\\\\"))->join("\\\"");
						$r->add("\"" . _hx_string_or_null($quoted) . "\" <" . _hx_string_or_null($c->address) . ">");
						unset($quoted);
					}
					unset($tmp1);
				}
				unset($tmp,$c);
			}
		}
		return $r->join(",");
	}
	function __toString() { return 'mtwin.mail.Tools'; }
}
mtwin_mail_Tools::$REG_HEADER_DECODE = new EReg("^(.*?)=\\?([^\\?]+)\\?(Q|B)\\?([^?]*)\\?=\\s*(.*?)\$", "i");
mtwin_mail_Tools::$REG_QP_LB = new EReg("=\\\\r?\\\\n", "");
mtwin_mail_Tools::$REG_QP = new EReg("=([A-Fa-f0-9]{1,2})", "");
mtwin_mail_Tools::$REG_SPACES_EQUAL = new EReg("[\\s=]+", "g");
mtwin_mail_Tools::$REG_HEXA = new EReg("^[0-9A-F]{2}\$", "");
mtwin_mail_Tools::$REG_MHEADER = new EReg("^([^;]+)(.*?)\$", "");
mtwin_mail_Tools::$REG_PARAM1 = new EReg("^;\\s*([a-zA-Z]+)=\"(([^\"]|\\\\\")+)\"", "");
mtwin_mail_Tools::$REG_PARAM2 = new EReg("^;\\s*([a-zA-Z]+)=([^;]+)", "");
mtwin_mail_Tools::$REG_ADDRESS = new EReg("^(([^()<>@,;:\\\\\"\\[\\]\\s[:cntrl:]]+|\"(\\\\\"|[^\"])*\")@[A-Z0-9][A-Z0-9-.]*)", "i");
mtwin_mail_Tools::$REG_ROUTE_ADDR = new EReg("^<(([^()<>@,;:\\\\\"\\[\\]\\s[:cntrl:]]+|\"(\\\\\"|[^\"])*\")@[A-Z0-9][A-Z0-9-.]*)>", "i");
mtwin_mail_Tools::$REG_ATOM = new EReg("^([^()<>@,;:\"\\[\\]\\s[:cntrl:]]+)", "i");
mtwin_mail_Tools::$REG_QSTRING = new EReg("^\"((\\\\\"|[^\"])*)\"", "");
mtwin_mail_Tools::$REG_COMMENT = new EReg("^\\(((\\\\\\)|[^)])*)\\)", "");
mtwin_mail_Tools::$REG_SEPARATOR = new EReg(",\\s*", "");
