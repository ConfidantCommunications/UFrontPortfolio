<?php

// Generated by Haxe 3.4.4
class tink_core_FutureTrigger implements tink_core__Future_FutureObject{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this1 = (new _hx_array(array()));
		$this->{"list"} = $this1;
	}}
	public $result;
	public $list;
	public function handle($callback) {
		$_g = $this->{"list"};
		if($_g === null) {
			tink_core__Callback_Callback_Impl_::invoke($callback, $this->result);
			return null;
		} else {
			$v = $_g;
			return tink_core__Callback_CallbackList_Impl_::add($v, $callback);
		}
	}
	public function map($f) {
		$_g = $this->{"list"};
		if($_g === null) {
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(call_user_func_array($f, array($this->result))));
		} else {
			$v = $_g;
			$ret = new tink_core_FutureTrigger();
			tink_core__Callback_CallbackList_Impl_::add($this->{"list"}, array(new _hx_lambda(array(&$f, &$ret), "tink_core_FutureTrigger_0"), 'execute'));
			return $ret;
		}
	}
	public function flatMap($f) {
		$_g = $this->{"list"};
		if($_g === null) {
			return call_user_func_array($f, array($this->result));
		} else {
			$v = $_g;
			$ret = new tink_core_FutureTrigger();
			tink_core__Callback_CallbackList_Impl_::add($this->{"list"}, array(new _hx_lambda(array(&$f, &$ret), "tink_core_FutureTrigger_1"), 'execute'));
			return $ret;
		}
	}
	public function gather() {
		return $this;
	}
	public function eager() {
		return $this;
	}
	public function asFuture() {
		return $this;
	}
	public function trigger($result) {
		if($this->{"list"} === null) {
			return false;
		} else {
			$list = $this->{"list"};
			$this->{"list"} = null;
			$this->result = $result;
			tink_core__Callback_CallbackList_Impl_::invoke($list, $result);
			tink_core__Callback_CallbackList_Impl_::clear($list);
			return true;
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function gatherFuture($f) {
		$op = null;
		$this1 = new tink_core__Future_SimpleFuture(array(new _hx_lambda(array(&$f, &$op), "tink_core_FutureTrigger_2"), 'execute'));
		return $this1;
	}
	function __toString() { return 'tink.core.FutureTrigger'; }
}
function tink_core_FutureTrigger_0(&$f, &$ret, $v1) {
	{
		$tmp = call_user_func_array($f, array($v1));
		$ret->trigger($tmp);
	}
}
function tink_core_FutureTrigger_1(&$f, &$ret, $v1) {
	{
		call_user_func_array($f, array($v1))->handle((property_exists($ret, "trigger") ? $ret->trigger: array($ret, "trigger")));
	}
}
function tink_core_FutureTrigger_2(&$f, &$op, $cb) {
	{
		if($op === null) {
			$op = new tink_core_FutureTrigger();
			$f->handle((property_exists($op, "trigger") ? $op->trigger: array($op, "trigger")));
			$f = null;
		}
		return $op->handle($cb);
	}
}
