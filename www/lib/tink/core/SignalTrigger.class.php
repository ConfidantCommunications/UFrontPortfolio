<?php

// Generated by Haxe 3.4.4
class tink_core_SignalTrigger implements tink_core_SignalObject{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this1 = (new _hx_array(array()));
		$this->handlers = $this1;
	}}
	public $handlers;
	public function trigger($event) {
		tink_core__Callback_CallbackList_Impl_::invoke($this->handlers, $event);
	}
	public function getLength() {
		return $this->handlers->length;
	}
	public function handle($cb) {
		return tink_core__Callback_CallbackList_Impl_::add($this->handlers, $cb);
	}
	public function clear() {
		tink_core__Callback_CallbackList_Impl_::clear($this->handlers);
	}
	public function asSignal() {
		return $this;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core.SignalTrigger'; }
}
