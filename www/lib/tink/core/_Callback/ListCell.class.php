<?php

// Generated by Haxe 3.4.4
class tink_core__Callback_ListCell implements tink_core__Callback_LinkObject{
	public function __construct($cb, $list) {
		if(!php_Boot::$skip_constructor) {
		if($cb === null) {
			throw new HException("callback expected but null received");
		}
		$this->cb = $cb;
		$this->{"list"} = $list;
	}}
	public $list;
	public $cb;
	public function invoke($data) {
		if($this->cb !== null) {
			tink_core__Callback_Callback_Impl_::invoke((property_exists($this, "cb") ? $this->cb: array($this, "cb")), $data);
		}
	}
	public function clear() {
		$this->{"list"} = null;
		$this->cb = null;
	}
	public function dissolve() {
		$_g = $this->{"list"};
		if($_g !== null) {
			$v = $_g;
			{
				$this->clear();
				$v->remove($this);
			}
		}
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core._Callback.ListCell'; }
}
