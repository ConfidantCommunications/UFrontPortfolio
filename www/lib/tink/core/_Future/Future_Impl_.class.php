<?php

// Generated by Haxe 3.4.4
class tink_core__Future_Future_Impl_ {
	public function __construct(){}
	static $NULL;
	static $NOISE;
	static $NEVER;
	static function _new($f) {
		$this1 = new tink_core__Future_SimpleFuture($f);
		return $this1;
	}
	static function first($this1, $other) {
		$ret = new tink_core_FutureTrigger();
		$l1 = $this1->handle((property_exists($ret, "trigger") ? $ret->trigger: array($ret, "trigger")));
		$l2 = $other->handle((property_exists($ret, "trigger") ? $ret->trigger: array($ret, "trigger")));
		$ret1 = $ret;
		if($l1 !== null) {
			$this2 = $l1;
			$ret1->handle(array(new _hx_lambda(array(&$this2), "tink_core__Future_Future_Impl__0"), 'execute'));
		}
		if($l2 !== null) {
			$this3 = $l2;
			$ret1->handle(array(new _hx_lambda(array(&$this3), "tink_core__Future_Future_Impl__1"), 'execute'));
		}
		return $ret1;
	}
	static function map($this1, $f, $gather = null) {
		if($gather === null) {
			$gather = true;
		}
		$ret = $this1->map($f);
		if($gather) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}
	static function flatMap($this1, $next, $gather = null) {
		if($gather === null) {
			$gather = true;
		}
		$ret = $this1->flatMap($next);
		if($gather) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}
	static function next($this1, $n) {
		return $this1->flatMap(array(new _hx_lambda(array(&$n), "tink_core__Future_Future_Impl__2"), 'execute'));
	}
	static function merge($this1, $other, $merger, $gather = null) {
		if($gather === null) {
			$gather = true;
		}
		$ret = $this1->flatMap(array(new _hx_lambda(array(&$merger, &$other), "tink_core__Future_Future_Impl__3"), 'execute'));
		if($gather) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}
	static function flatten($f) {
		return new tink_core__Future_NestedFuture($f);
	}
	static function asPromise($s) {
		return $s;
	}
	static function ofMany($futures, $gather = null) {
		if($gather === null) {
			$gather = true;
		}
		$ret = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst((new _hx_array(array()))));
		{
			$_g = 0;
			while($_g < $futures->length) {
				$f = $futures[$_g];
				$_g = $_g + 1;
				$ret1 = $ret->flatMap(array(new _hx_lambda(array(&$f), "tink_core__Future_Future_Impl__4"), 'execute'));
				$ret = $ret1;
				unset($ret1,$f);
			}
		}
		if($gather) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}
	static function fromMany($futures) {
		return tink_core__Future_Future_Impl_::ofMany($futures, null);
	}
	static function lazy($l) {
		return new tink_core__Future_SyncFuture($l);
	}
	static function sync($v) {
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
	}
	static function async($f, $lazy = null) {
		if($lazy === null) {
			$lazy = false;
		}
		if($lazy) {
			return new tink_core__Future_LazyTrigger($f);
		} else {
			$op = new tink_core_FutureTrigger();
			$wrapped = $f;
			tink_core__Callback_Callback_Impl_::invoke($wrapped, (property_exists($op, "trigger") ? $op->trigger: array($op, "trigger")));
			return $op;
		}
	}
	static function hor($a, $b) {
		return tink_core__Future_Future_Impl_::first($a, $b);
	}
	static function either($a, $b) {
		$ret = $a->map((property_exists("haxe_ds_Either", "Left") ? haxe_ds_Either::$Left: array("haxe_ds_Either", "Left")));
		$ret1 = $b->map((property_exists("haxe_ds_Either", "Right") ? haxe_ds_Either::$Right: array("haxe_ds_Either", "Right")));
		return tink_core__Future_Future_Impl_::first($ret, $ret1);
	}
	static function hand($a, $b) {
		return tink_core__Future_Future_Impl_::merge($a, $b, array(new _hx_lambda(array(), "tink_core__Future_Future_Impl__5"), 'execute'), null);
	}
	static function _tryFailingFlatMap($f, $map) {
		$ret = $f->flatMap(array(new _hx_lambda(array(&$map), "tink_core__Future_Future_Impl__6"), 'execute'));
		return $ret->gather();
	}
	static function _tryFlatMap($f, $map) {
		$ret = $f->flatMap(array(new _hx_lambda(array(&$map), "tink_core__Future_Future_Impl__7"), 'execute'));
		return $ret->gather();
	}
	static function _tryFailingMap($f, $map) {
		$ret = $f->map(array(new _hx_lambda(array(&$map), "tink_core__Future_Future_Impl__8"), 'execute'));
		return $ret->gather();
	}
	static function _tryMap($f, $map) {
		$ret = $f->map(array(new _hx_lambda(array(&$map), "tink_core__Future_Future_Impl__9"), 'execute'));
		return $ret->gather();
	}
	static function _flatMap($f, $map) {
		$ret = $f->flatMap($map);
		return $ret->gather();
	}
	static function _map($f, $map) {
		$ret = $f->map($map);
		return $ret->gather();
	}
	static function trigger() {
		return new tink_core_FutureTrigger();
	}
	function __toString() { return 'tink.core._Future.Future_Impl_'; }
}
tink_core__Future_Future_Impl_::$NULL = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(null));
tink_core__Future_Future_Impl_::$NOISE = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Noise::$Noise));
tink_core__Future_Future_Impl_::$NEVER = tink_core__Future_NeverFuture::$inst;
function tink_core__Future_Future_Impl__0(&$this2, $_) {
	{
		$this2->dissolve();
	}
}
function tink_core__Future_Future_Impl__1(&$this3, $_1) {
	{
		$this3->dissolve();
	}
}
function tink_core__Future_Future_Impl__2(&$n, $v) {
	{
		return call_user_func_array($n, array($v));
	}
}
function tink_core__Future_Future_Impl__3(&$merger, &$other, $t) {
	{
		$ret1 = $other->map(array(new _hx_lambda(array(&$merger, &$t), "tink_core__Future_Future_Impl__10"), 'execute'));
		return $ret1;
	}
}
function tink_core__Future_Future_Impl__4(&$f, $results) {
	{
		$ret2 = $f->map(array(new _hx_lambda(array(&$results), "tink_core__Future_Future_Impl__11"), 'execute'));
		return $ret2;
	}
}
function tink_core__Future_Future_Impl__5($a1, $b1) {
	{
		$this1 = new tink_core_MPair($a1, $b1);
		return $this1;
	}
}
function tink_core__Future_Future_Impl__6(&$map, $o) {
	{
		switch($o->index) {
		case 0:{
			$d = _hx_deref($o)->params[0];
			return call_user_func_array($map, array($d));
		}break;
		case 1:{
			$f1 = _hx_deref($o)->params[0];
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure($f1)));
		}break;
		}
	}
}
function tink_core__Future_Future_Impl__7(&$map, $o) {
	{
		switch($o->index) {
		case 0:{
			$d = _hx_deref($o)->params[0];
			$this1 = call_user_func_array($map, array($d));
			$ret1 = $this1->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
			return $ret1->gather();
		}break;
		case 1:{
			$f1 = _hx_deref($o)->params[0];
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure($f1)));
		}break;
		}
	}
}
function tink_core__Future_Future_Impl__8(&$map, $o) {
	{
		return tink_core_OutcomeTools::flatMap($o, tink_core__Outcome_OutcomeMapper_Impl_::withSameError($map));
	}
}
function tink_core__Future_Future_Impl__9(&$map, $o) {
	{
		return tink_core_OutcomeTools::map($o, $map);
	}
}
function tink_core__Future_Future_Impl__10(&$merger, &$t, $a) {
	{
		return call_user_func_array($merger, array($t, $a));
	}
}
function tink_core__Future_Future_Impl__11(&$results, $result) {
	{
		return $results->concat((new _hx_array(array($result))));
	}
}
