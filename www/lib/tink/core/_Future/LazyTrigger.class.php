<?php

// Generated by Haxe 3.4.4
class tink_core__Future_LazyTrigger extends tink_core_FutureTrigger {
	public function __construct($op) {
		if(!php_Boot::$skip_constructor) {
		$this->op = $op;
		parent::__construct();
	}}
	public $op;
	public function eager() {
		if($this->op !== null) {
			$op = (property_exists($this, "op") ? $this->op: array($this, "op"));
			$this->op = null;
			tink_core__Callback_Callback_Impl_::invoke($op, (property_exists($this, "trigger") ? $this->trigger: array($this, "trigger")));
		}
		return $this;
	}
	public function map($f) {
		$_gthis = $this;
		if($this->op === null) {
			return parent::map($f);
		} else {
			return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$f), "tink_core__Future_LazyTrigger_0"), 'execute'), true);
		}
	}
	public function flatMap($f) {
		$_gthis = $this;
		if($this->op === null) {
			return parent::flatMap($f);
		} else {
			return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$f), "tink_core__Future_LazyTrigger_1"), 'execute'), true);
		}
	}
	public function handle($cb) {
		$this->eager();
		return parent::handle($cb);
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core._Future.LazyTrigger'; }
}
function tink_core__Future_LazyTrigger_0(&$_gthis, &$f, $cb) {
	{
		$_gthis->handle(array(new _hx_lambda(array(&$cb, &$f), "tink_core__Future_LazyTrigger_2"), 'execute'));
	}
}
function tink_core__Future_LazyTrigger_1(&$_gthis, &$f, $cb) {
	{
		$_gthis->handle(array(new _hx_lambda(array(&$cb, &$f), "tink_core__Future_LazyTrigger_3"), 'execute'));
	}
}
function tink_core__Future_LazyTrigger_2(&$cb, &$f, $v) {
	{
		$tmp = call_user_func_array($f, array($v));
		call_user_func_array($cb, array($tmp));
	}
}
function tink_core__Future_LazyTrigger_3(&$cb, &$f, $v) {
	{
		call_user_func_array($f, array($v))->handle($cb);
	}
}
