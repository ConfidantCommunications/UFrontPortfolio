<?php

// Generated by Haxe 3.4.4
class tink_core__Promise_Next_Impl_ {
	public function __construct(){}
	static function ofSafe($f) {
		return array(new _hx_lambda(array(&$f), "tink_core__Promise_Next_Impl__0"), 'execute');
	}
	static function ofSync($f) {
		return array(new _hx_lambda(array(&$f), "tink_core__Promise_Next_Impl__1"), 'execute');
	}
	static function ofSafeSync($f) {
		return array(new _hx_lambda(array(&$f), "tink_core__Promise_Next_Impl__2"), 'execute');
	}
	static function _chain($a, $b) {
		return array(new _hx_lambda(array(&$a, &$b), "tink_core__Promise_Next_Impl__3"), 'execute');
	}
	function __toString() { return 'tink.core._Promise.Next_Impl_'; }
}
function tink_core__Promise_Next_Impl__0(&$f, $x) {
	{
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(call_user_func_array($f, array($x))));
	}
}
function tink_core__Promise_Next_Impl__1(&$f, $x) {
	{
		$f1 = call_user_func_array($f, array($x));
		$ret = $f1->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
		return $ret->gather();
	}
}
function tink_core__Promise_Next_Impl__2(&$f, $x) {
	{
		return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success(call_user_func_array($f, array($x))));
	}
}
function tink_core__Promise_Next_Impl__3(&$a, &$b, $v) {
	{
		$tmp = call_user_func_array($a, array($v));
		return tink_core__Promise_Promise_Impl_::next($tmp, $b, null);
	}
}
