<?php

// Generated by Haxe 3.4.4
class tink_core__Promise_Promise_Impl_ {
	public function __construct(){}
	static $NULL;
	static $NOISE;
	static $NEVER;
	static function eager($this1) {
		return $this1->eager();
	}
	static function map($this1, $f) {
		$ret = $this1->map($f);
		return $ret->gather();
	}
	static function flatMap($this1, $f) {
		$ret = $this1->flatMap($f);
		return $ret->gather();
	}
	static function tryRecover($this1, $f) {
		$ret = $this1->flatMap(array(new _hx_lambda(array(&$f), "tink_core__Promise_Promise_Impl__0"), 'execute'));
		return $ret->gather();
	}
	static function recover($this1, $f) {
		$ret = $this1->flatMap(array(new _hx_lambda(array(&$f), "tink_core__Promise_Promise_Impl__1"), 'execute'));
		return $ret->gather();
	}
	static function mapError($this1, $f) {
		$ret = $this1->map(array(new _hx_lambda(array(&$f), "tink_core__Promise_Promise_Impl__2"), 'execute'));
		return $ret->gather();
	}
	static function handle($this1, $cb) {
		return $this1->handle($cb);
	}
	static function noise($this1) {
		return tink_core__Promise_Promise_Impl_::next($this1, array(new _hx_lambda(array(), "tink_core__Promise_Promise_Impl__3"), 'execute'), null);
	}
	static function isSuccess($this1) {
		$ret = $this1->map(array(new _hx_lambda(array(), "tink_core__Promise_Promise_Impl__4"), 'execute'));
		return $ret->gather();
	}
	static function next($this1, $f, $gather = null) {
		if($gather === null) {
			$gather = true;
		}
		$ret = $this1->flatMap(array(new _hx_lambda(array(&$f), "tink_core__Promise_Promise_Impl__5"), 'execute'));
		if($gather) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}
	static function swap($this1, $v) {
		return tink_core__Future_Future_Impl_::_tryMap($this1, array(new _hx_lambda(array(&$v), "tink_core__Promise_Promise_Impl__6"), 'execute'));
	}
	static function swapError($this1, $e) {
		return tink_core__Promise_Promise_Impl_::mapError($this1, array(new _hx_lambda(array(&$e), "tink_core__Promise_Promise_Impl__7"), 'execute'));
	}
	static function merge($this1, $other, $merger, $gather = null) {
		if($gather === null) {
			$gather = true;
		}
		return tink_core__Promise_Promise_Impl_::next($this1, array(new _hx_lambda(array(&$merger, &$other), "tink_core__Promise_Promise_Impl__8"), 'execute'), $gather);
	}
	static function hand($a, $b) {
		return tink_core__Promise_Promise_Impl_::merge($a, $b, array(new _hx_lambda(array(), "tink_core__Promise_Promise_Impl__9"), 'execute'), null);
	}
	static function ofSpecific($s) {
		return $s;
	}
	static function ofFuture($f) {
		$ret = $f->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
		return $ret->gather();
	}
	static function ofOutcome($o) {
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($o));
	}
	static function ofError($e) {
		return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Failure($e));
	}
	static function ofData($d) {
		return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success($d));
	}
	static function lazy($p) {
		return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$p), "tink_core__Promise_Promise_Impl__10"), 'execute'), true);
	}
	static function inParallel($a, $lazy = null) {
		if($a->length === 0) {
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success((new _hx_array(array())))));
		} else {
			return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$a), "tink_core__Promise_Promise_Impl__11"), 'execute'), $lazy);
		}
	}
	static function inSequence($a) {
		$loop = null;
		$loop = array(new _hx_lambda(array(&$a, &$loop), "tink_core__Promise_Promise_Impl__12"), 'execute');
		$loop1 = $loop;
		return call_user_func_array($loop1, array(0));
	}
	static function lift($p) {
		return $p;
	}
	function __toString() { return 'tink.core._Promise.Promise_Impl_'; }
}
tink_core__Promise_Promise_Impl_::$NULL = tink_core__Promise_Promise_Impl__13();
tink_core__Promise_Promise_Impl_::$NOISE = tink_core__Promise_Promise_Impl__14();
tink_core__Promise_Promise_Impl_::$NEVER = tink_core__Promise_Promise_Impl__15();
function tink_core__Promise_Promise_Impl__0(&$f, $o) {
	{
		switch($o->index) {
		case 0:{
			$d = _hx_deref($o)->params[0];
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($o));
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			return call_user_func_array($f, array($e));
		}break;
		}
	}
}
function tink_core__Promise_Promise_Impl__1(&$f, $o) {
	{
		switch($o->index) {
		case 0:{
			$d = _hx_deref($o)->params[0];
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($d));
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			return call_user_func_array($f, array($e));
		}break;
		}
	}
}
function tink_core__Promise_Promise_Impl__2(&$f, $o) {
	{
		switch($o->index) {
		case 0:{
			return $o;
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			return tink_core_Outcome::Failure(call_user_func_array($f, array($e)));
		}break;
		}
	}
}
function tink_core__Promise_Promise_Impl__3($v) {
	{
		return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success(tink_core_Noise::$Noise));
	}
}
function tink_core__Promise_Promise_Impl__4($o) {
	{
		return tink_core_OutcomeTools::isSuccess($o);
	}
}
function tink_core__Promise_Promise_Impl__5(&$f, $o) {
	{
		switch($o->index) {
		case 0:{
			$d = _hx_deref($o)->params[0];
			return call_user_func_array($f, array($d));
		}break;
		case 1:{
			$f1 = _hx_deref($o)->params[0];
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure($f1)));
		}break;
		}
	}
}
function tink_core__Promise_Promise_Impl__6(&$v, $_) {
	{
		return $v;
	}
}
function tink_core__Promise_Promise_Impl__7(&$e, $_) {
	{
		return $e;
	}
}
function tink_core__Promise_Promise_Impl__8(&$merger, &$other, $t) {
	{
		return tink_core__Promise_Promise_Impl_::next($other, array(new _hx_lambda(array(&$merger, &$t), "tink_core__Promise_Promise_Impl__16"), 'execute'), false);
	}
}
function tink_core__Promise_Promise_Impl__9($a1, $b1) {
	{
		$this1 = new tink_core_MPair($a1, $b1);
		return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success($this1));
	}
}
function tink_core__Promise_Promise_Impl__10(&$p, $cb) {
	{
		$this1 = $p->get();
		$this1->handle($cb);
	}
}
function tink_core__Promise_Promise_Impl__11(&$a, $cb) {
	{
		$result = (new _hx_array(array()));
		$pending = $a->length;
		$links = null;
		$sync = false;
		$done = array(new _hx_lambda(array(&$cb, &$links, &$sync), "tink_core__Promise_Promise_Impl__17"), 'execute');
		$fail = array(new _hx_lambda(array(&$done), "tink_core__Promise_Promise_Impl__18"), 'execute');
		$set = array(new _hx_lambda(array(&$done, &$pending, &$result), "tink_core__Promise_Promise_Impl__19"), 'execute');
		$linkArray = (new _hx_array(array()));
		{
			$_g1 = 0;
			$_g = $a->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				if($sync) {
					break;
				}
				$linkArray->push(_hx_array_get($a, $i)->handle(array(new _hx_lambda(array(&$fail, &$i, &$set), "tink_core__Promise_Promise_Impl__20"), 'execute')));
				unset($i);
			}
		}
		$links = tink_core__Callback_CallbackLink_Impl_::fromMany($linkArray);
		if($sync) {
			if($links !== null) {
				$links->dissolve();
			}
		}
	}
}
function tink_core__Promise_Promise_Impl__12(&$a, &$loop, $index) {
	{
		if($index === $a->length) {
			return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success((new _hx_array(array()))));
		} else {
			return tink_core__Promise_Promise_Impl_::next($a[$index], array(new _hx_lambda(array(&$index, &$loop), "tink_core__Promise_Promise_Impl__21"), 'execute'), null);
		}
	}
}
function tink_core__Promise_Promise_Impl__13() {
	{
		$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(null)));
		return $tmp;
	}
}
function tink_core__Promise_Promise_Impl__14() {
	{
		$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(tink_core_Noise::$Noise)));
		return $tmp;
	}
}
function tink_core__Promise_Promise_Impl__15() {
	{
		$ret = tink_core__Future_Future_Impl_::$NEVER->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
		return $ret->gather();
	}
}
function tink_core__Promise_Promise_Impl__16(&$merger, &$t, $a) {
	{
		return call_user_func_array($merger, array($t, $a));
	}
}
function tink_core__Promise_Promise_Impl__17(&$cb, &$links, &$sync, $o) {
	{
		if($links === null) {
			$sync = true;
		} else {
			if($links !== null) {
				$links->dissolve();
			}
		}
		call_user_func_array($cb, array($o));
	}
}
function tink_core__Promise_Promise_Impl__18(&$done, $e) {
	{
		call_user_func_array($done, array(tink_core_Outcome::Failure($e)));
	}
}
function tink_core__Promise_Promise_Impl__19(&$done, &$pending, &$result, $index, $value) {
	{
		$result[$index] = $value;
		$pending = $pending - 1;
		if($pending === 0) {
			call_user_func_array($done, array(tink_core_Outcome::Success($result)));
		}
	}
}
function tink_core__Promise_Promise_Impl__20(&$fail, &$i, &$set, $o1) {
	{
		switch($o1->index) {
		case 0:{
			$v = _hx_deref($o1)->params[0];
			call_user_func_array($set, array($i, $v));
		}break;
		case 1:{
			$e1 = _hx_deref($o1)->params[0];
			call_user_func_array($fail, array($e1));
		}break;
		}
	}
}
function tink_core__Promise_Promise_Impl__21(&$index, &$loop, $head) {
	{
		return tink_core__Promise_Promise_Impl_::next(call_user_func_array($loop, array($index + 1)), array(new _hx_lambda(array(&$head), "tink_core__Promise_Promise_Impl__22"), 'execute'), null);
	}
}
function tink_core__Promise_Promise_Impl__22(&$head, $tail) {
	{
		return tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success(_hx_deref((new _hx_array(array($head))))->concat($tail)));
	}
}
