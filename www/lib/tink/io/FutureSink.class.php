<?php

// Generated by Haxe 3.4.4
class tink_io_FutureSink extends tink_io_SinkBase {
	public function __construct($f) {
		if(!php_Boot::$skip_constructor) {
		$this->f = $f;
	}}
	public $f;
	public function write($from) {
		return tink_io_FutureSink::cause(tink_core__Future_Future_Impl_::_tryFailingFlatMap($this->f, array(new _hx_lambda(array(&$from), "tink_io_FutureSink_0"), 'execute')));
	}
	public function close() {
		return tink_io_FutureSink::cause(tink_core__Future_Future_Impl_::_tryFailingFlatMap($this->f, array(new _hx_lambda(array(), "tink_io_FutureSink_1"), 'execute')));
	}
	public function toString() {
		$ret = "PENDING";
		$this->f->handle(array(new _hx_lambda(array(&$ret), "tink_io_FutureSink_2"), 'execute'));
		return "[FutureSink " . _hx_string_or_null($ret) . "]";
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function cause($f) {
		$f->handle(tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(), "tink_io_FutureSink_3"), 'execute')));
		return $f;
	}
	function __toString() { return $this->toString(); }
}
function tink_io_FutureSink_0(&$from, $s) {
	{
		return $s->write($from);
	}
}
function tink_io_FutureSink_1($s) {
	{
		return $s->close();
	}
}
function tink_io_FutureSink_2(&$ret, $o) {
	{
		$ret = Std::string($o);
	}
}
function tink_io_FutureSink_3() {
	{
	}
}
