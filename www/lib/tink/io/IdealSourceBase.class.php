<?php

// Generated by Haxe 3.4.4
class tink_io_IdealSourceBase extends tink_io_SourceBase implements tink_io_IdealSourceObject{
	public function idealize($onError) {
		return $this;
	}
	public function allSafely() {
		$_gthis = $this;
		return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis), "tink_io_IdealSourceBase_0"), 'execute'), null);
	}
	public function all() {
		$this1 = $this->allSafely();
		$ret = $this1->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
		return $ret->gather();
	}
	public function readSafely($into, $max = null) {
		if($max === null) {
			$max = 268435456;
		}
		throw new HException("abstract");
	}
	public function closeSafely() {
		throw new HException("abstract");
	}
	public function close() {
		$this1 = $this->closeSafely();
		$ret = $this1->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
		return $ret->gather();
	}
	public function read($into, $max = null) {
		if($max === null) {
			$max = 268435456;
		}
		$this1 = $this->readSafely($into, $max);
		$ret = $this1->map((property_exists("tink_core_Outcome", "Success") ? tink_core_Outcome::$Success: array("tink_core_Outcome", "Success")));
		return $ret->gather();
	}
	public function pipeSafelyTo($dest, $options = null) {
		$_gthis = $this;
		return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$dest, &$options), "tink_io_IdealSourceBase_1"), 'execute'), null);
	}
	function __toString() { return 'tink.io.IdealSourceBase'; }
}
function tink_io_IdealSourceBase_0(&$_gthis, $cb) {
	{
		$this1 = tink_io__IdealSink_IdealSink_Impl_::inMemory(array(new _hx_lambda(array(&$cb), "tink_io_IdealSourceBase_2"), 'execute'), null);
		$_gthis->pipeSafelyTo($this1, _hx_anonymous(array("end" => true)));
	}
}
function tink_io_IdealSourceBase_1(&$_gthis, &$dest, &$options, $cb) {
	{
		$this1 = $_gthis;
		tink_io_Pipe::make($this1, $dest, null, $options, array(new _hx_lambda(array(&$cb), "tink_io_IdealSourceBase_3"), 'execute'));
	}
}
function tink_io_IdealSourceBase_2(&$cb, $buf) {
	{
		$s = $buf->getBytes();
		call_user_func_array($cb, array($s));
	}
}
function tink_io_IdealSourceBase_3(&$cb, $_, $res) {
	{
		call_user_func_array($cb, array($res));
	}
}
