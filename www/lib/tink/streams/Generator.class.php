<?php

// Generated by Haxe 3.4.4
class tink_streams_Generator extends tink_streams_StepWise {
	public function __construct($step) {
		if(!php_Boot::$skip_constructor) {
		$this->step = $step;
		$this->waiting = new _hx_array(array());
	}}
	public $step;
	public $waiting;
	public function next() {
		$_gthis = $this;
		$ret = new tink_core_FutureTrigger();
		if($this->waiting->push($ret) === 1) {
			$this->step()->handle((property_exists($ret, "trigger") ? $ret->trigger: array($ret, "trigger")));
		} else {
			$tmp = $this->waiting[$this->waiting->length - 2];
			$tmp->handle(tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(&$_gthis, &$ret), "tink_streams_Generator_0"), 'execute')));
		}
		return $ret;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.streams.Generator'; }
}
function tink_streams_Generator_0(&$_gthis, &$ret) {
	{
		$_gthis->step()->handle((property_exists($ret, "trigger") ? $ret->trigger: array($ret, "trigger")));
	}
}
