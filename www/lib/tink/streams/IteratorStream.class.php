<?php

// Generated by Haxe 3.4.4
class tink_streams_IteratorStream extends tink_streams_StepWise {
	public function __construct($target, $error = null) {
		if(!php_Boot::$skip_constructor) {
		$this->target = $target;
		$this->error = $error;
	}}
	public $target;
	public $error;
	public function next() {
		$v = null;
		if($this->target->hasNext()) {
			$v = tink_streams_StreamStep::Data($this->target->next());
		} else {
			if($this->error === null) {
				$v = tink_streams_StreamStep::$End;
			} else {
				$v = tink_streams_StreamStep::Fail($this->error);
			}
		}
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
	}
	public function hforEach($item) {
		if($this->error !== null) {
			return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure($this->error)));
		}
		while($this->target->hasNext()) {
			if(!call_user_func_array($item, array($this->target->next()))) {
				return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(false)));
			}
		}
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(true)));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.streams.IteratorStream'; }
}
