<?php

// Generated by Haxe 3.4.4
class tink_streams_StreamBase implements tink_streams_StreamObject{
	public function __construct(){}
	public function next() {
		$_gthis = $this;
		return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis), "tink_streams_StreamBase_0"), 'execute'), null);
	}
	public function hforEach($item) {
		return $this->forEachAsync(array(new _hx_lambda(array(&$item), "tink_streams_StreamBase_1"), 'execute'));
	}
	public function forEachAsync($item) {
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(true)));
	}
	public function map($item) {
		$this1 = new tink_streams_StreamMapFilter($this, tink_streams__Stream_StreamMap_Impl_::lift($item));
		return $this1;
	}
	public function mapAsync($item) {
		$this1 = new tink_streams_StreamMapFilterAsync($this, tink_streams__Stream_StreamMapAsync_Impl_::lift($item));
		return $this1;
	}
	public function filter($item) {
		$this1 = new tink_streams_StreamMapFilter($this, tink_streams__Stream_StreamFilter_Impl_::lift($item));
		return $this1;
	}
	public function filterAsync($item) {
		$this1 = new tink_streams_StreamMapFilterAsync($this, tink_streams__Stream_StreamFilterAsync_Impl_::lift($item));
		return $this1;
	}
	public function merge($item) {
		$this1 = new tink_streams_StreamMapFilter($this, tink_streams__Stream_StreamMerge_Impl_::lift($item));
		return $this1;
	}
	public function mergeAsync($item) {
		$this1 = new tink_streams_StreamMapFilterAsync($this, tink_streams__Stream_StreamMergeAsync_Impl_::lift($item));
		return $this1;
	}
	function __toString() { return 'tink.streams.StreamBase'; }
}
function tink_streams_StreamBase_0(&$_gthis, $cb) {
	{
		$_gthis->hforEach(array(new _hx_lambda(array(&$cb), "tink_streams_StreamBase_2"), 'execute'))->handle(array(new _hx_lambda(array(&$cb), "tink_streams_StreamBase_3"), 'execute'));
	}
}
function tink_streams_StreamBase_1(&$item, $x) {
	{
		return new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(call_user_func_array($item, array($x))));
	}
}
function tink_streams_StreamBase_2(&$cb, $x) {
	{
		call_user_func_array($cb, array(tink_streams_StreamStep::Data($x)));
		return false;
	}
}
function tink_streams_StreamBase_3(&$cb, $o) {
	{
		switch($o->index) {
		case 0:{
			if(_hx_deref($o)->params[0] === true) {
				call_user_func_array($cb, array(tink_streams_StreamStep::$End));
			}
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			call_user_func_array($cb, array(tink_streams_StreamStep::Fail($e)));
		}break;
		}
	}
}
