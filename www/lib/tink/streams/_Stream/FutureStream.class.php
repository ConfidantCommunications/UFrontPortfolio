<?php

// Generated by Haxe 3.4.4
class tink_streams__Stream_FutureStream extends tink_streams_StreamBase {
	public function __construct($target) {
		if(!php_Boot::$skip_constructor) {
		$this->target = $target;
	}}
	public $target;
	public function later($f) {
		$_gthis = $this;
		return tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$f), "tink_streams__Stream_FutureStream_0"), 'execute'), null);
	}
	public function hforEach($item) {
		return $this->later(array(new _hx_lambda(array(&$item), "tink_streams__Stream_FutureStream_1"), 'execute'));
	}
	public function forEachAsync($item) {
		return $this->later(array(new _hx_lambda(array(&$item), "tink_streams__Stream_FutureStream_2"), 'execute'));
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.streams._Stream.FutureStream'; }
}
function tink_streams__Stream_FutureStream_0(&$_gthis, &$f, $cb) {
	{
		$_gthis->target->handle(array(new _hx_lambda(array(&$cb, &$f), "tink_streams__Stream_FutureStream_3"), 'execute'));
	}
}
function tink_streams__Stream_FutureStream_1(&$item, $s) {
	{
		return $s->hforEach($item);
	}
}
function tink_streams__Stream_FutureStream_2(&$item, $s) {
	{
		return $s->forEachAsync($item);
	}
}
function tink_streams__Stream_FutureStream_3(&$cb, &$f, $o) {
	{
		switch($o->index) {
		case 0:{
			$s = _hx_deref($o)->params[0];
			call_user_func_array($f, array($s))->handle($cb);
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			call_user_func_array($cb, array(tink_core_Outcome::Failure($e)));
		}break;
		}
	}
}
