<?php

// Generated by Haxe 3.4.4
class ufront_app_HttpApplication {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->pathToContentDir = null;
		$this->requestMiddleware = (new _hx_array(array()));
		$this->requestHandlers = (new _hx_array(array()));
		$this->responseMiddleware = (new _hx_array(array()));
		$this->logHandlers = (new _hx_array(array()));
		$this->errorHandlers = (new _hx_array(array()));
		$this->urlFilters = (new _hx_array(array()));
		$this->messages = (new _hx_array(array()));
		$this->injector = new minject_Injector(null);
		$this->injector->mapType("minject.Injector", null, null)->toValue($this->injector);
	}}
	public $injector;
	public $requestMiddleware;
	public $requestHandlers;
	public $responseMiddleware;
	public $logHandlers;
	public $errorHandlers;
	public $urlFilters;
	public $originalTrace;
	public $messages;
	public $modulesReady;
	public $currentModule;
	public $pathToContentDir;
	public function init() {
		$_gthis = $this;
		$this->originalTrace = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		haxe_Log::$trace = array(new _hx_lambda(array(&$_gthis), "ufront_app_HttpApplication_0"), 'execute');
		if($this->modulesReady === null) {
			$futures = (new _hx_array(array()));
			{
				$_g = 0;
				$_g1 = $this->getModulesThatRequireInit();
				while($_g < $_g1->length) {
					$module = $_g1[$_g];
					$_g = $_g + 1;
					$futures->push($module->init($this));
					unset($module);
				}
			}
			$this1 = tink_core__Future_Future_Impl_::ofMany($futures, null);
			$ret = $this1->map(array(new _hx_lambda(array(), "ufront_app_HttpApplication_1"), 'execute'));
			$this->modulesReady = $ret->gather();
		}
		return $this->modulesReady;
	}
	public function dispose() {
		$_gthis = $this;
		$futures = (new _hx_array(array()));
		{
			$_g = 0;
			$_g1 = $this->getModulesThatRequireInit();
			while($_g < $_g1->length) {
				$module = $_g1[$_g];
				$_g = $_g + 1;
				$futures->push($module->dispose($this));
				unset($module);
			}
		}
		$this1 = tink_core__Future_Future_Impl_::ofMany($futures, null);
		$ret = $this1->map(array(new _hx_lambda(array(&$_gthis), "ufront_app_HttpApplication_2"), 'execute'));
		return $ret->gather();
	}
	public function getModulesThatRequireInit() {
		$moduleSets = (new _hx_array(array($this->requestMiddleware, $this->requestHandlers, $this->responseMiddleware, $this->logHandlers, $this->errorHandlers)));
		$modules = (new _hx_array(array()));
		{
			$_g = 0;
			while($_g < $moduleSets->length) {
				$set = $moduleSets[$_g];
				$_g = $_g + 1;
				{
					$_g1 = 0;
					while($_g1 < $set->length) {
						$module = $set[$_g1];
						$_g1 = $_g1 + 1;
						if(Std::is($module, _hx_qtype("ufront.app.UFInitRequired"))) {
							$modules->push($module);
						}
						unset($module);
					}
					unset($_g1);
				}
				unset($set);
			}
		}
		return $modules;
	}
	public function addRequestMiddleware($middlewareItem = null, $middleware = null, $first = null) {
		if($first === null) {
			$first = false;
		}
		return $this->addModule($this->requestMiddleware, $middlewareItem, $middleware, $first);
	}
	public function addRequestHandler($handler = null, $handlers = null, $first = null) {
		if($first === null) {
			$first = false;
		}
		return $this->addModule($this->requestHandlers, $handler, $handlers, $first);
	}
	public function addErrorHandler($handler = null, $handlers = null, $first = null) {
		if($first === null) {
			$first = false;
		}
		return $this->addModule($this->errorHandlers, $handler, $handlers, $first);
	}
	public function addResponseMiddleware($middlewareItem = null, $middleware = null, $last = null) {
		if($last === null) {
			$last = false;
		}
		return $this->addModule($this->responseMiddleware, $middlewareItem, $middleware, !$last);
	}
	public function addMiddleware($middlewareItem = null, $middleware = null, $firstInLastOut = null) {
		if($firstInLastOut === null) {
			$firstInLastOut = false;
		}
		$this->addModule($this->requestMiddleware, $middlewareItem, $middleware, $firstInLastOut);
		$this->addModule($this->responseMiddleware, $middlewareItem, $middleware, !$firstInLastOut);
		return $this;
	}
	public function addLogHandler($logger = null, $loggers = null, $first = null) {
		if($first === null) {
			$first = false;
		}
		return $this->addModule($this->logHandlers, $logger, $loggers, $first);
	}
	public function addModule($modulesArr, $newModule = null, $newModules = null, $first) {
		if($newModule !== null) {
			$this->injector->injectInto($newModule);
			if($first) {
				$modulesArr->unshift($newModule);
			} else {
				$modulesArr->push($newModule);
			}
		}
		if($newModules !== null) {
			$newModule1 = $newModules->iterator();
			while($newModule1->hasNext()) {
				$newModule2 = $newModule1->next();
				$this->injector->injectInto($newModule2);
				if($first) {
					$modulesArr->unshift($newModule2);
				} else {
					$modulesArr->push($newModule2);
				}
				unset($newModule2);
			}
		}
		return $this;
	}
	public function execute($httpContext) {
		$_gthis = $this;
		$httpContext->setUrlFilters($this->urlFilters);
		$reqMidModules = $this->requestMiddleware->map(array(new _hx_lambda(array(), "ufront_app_HttpApplication_3"), 'execute'));
		$reqHandModules = $this->requestHandlers->map(array(new _hx_lambda(array(), "ufront_app_HttpApplication_4"), 'execute'));
		$resMidModules = $this->responseMiddleware->map(array(new _hx_lambda(array(), "ufront_app_HttpApplication_5"), 'execute'));
		$logHandModules = $this->logHandlers->map(array(new _hx_lambda(array(&$_gthis), "ufront_app_HttpApplication_6"), 'execute'));
		$msg = "Begin executing request " . _hx_string_or_null($httpContext->getRequestUri());
		$allDone = tink_core__Future_Future_Impl_::_tryFailingFlatMap($this->init(), array(new _hx_lambda(array(&$_gthis, &$httpContext, &$logHandModules, &$reqHandModules, &$reqMidModules, &$resMidModules), "ufront_app_HttpApplication_7"), 'execute'));
		$allDone->handle(tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(&$httpContext), "ufront_app_HttpApplication_8"), 'execute')));
		return $allDone;
	}
	public function logModule($ctx, $msg) {
	}
	public function executeModules($modules, $ctx, $flag) {
		$_gthis = $this;
		$done = new tink_core_FutureTrigger();
		$msg = "  Begin executing modules for " . Std::string($flag);
		$runNext = null;
		$runNext = array(new _hx_lambda(array(&$_gthis, &$ctx, &$done, &$flag, &$modules, &$runNext), "ufront_app_HttpApplication_9"), 'execute');
		$runNext2 = $runNext;
		call_user_func($runNext2);
		return $done;
	}
	public function handleError($err, $ctx, $doneTrigger) {
		$_gthis = $this;
		if(($ctx->completion & 1 << ufront_web_context_RequestCompletion::$CErrorHandlersTriggered->index) === 0) {
			$msg = "  Begin handling error " . Std::string($err);
			$ctx1 = $ctx;
			$ctx1->completion = $ctx1->completion | 1 << ufront_web_context_RequestCompletion::$CErrorHandlersTriggered->index;
			$errHandlerModules = $this->errorHandlers->map(array(new _hx_lambda(array(&$err), "ufront_app_HttpApplication_10"), 'execute'));
			$resMidModules = $this->responseMiddleware->map(array(new _hx_lambda(array(), "ufront_app_HttpApplication_11"), 'execute'));
			$logHandModules = $this->logHandlers->map(array(new _hx_lambda(array(&$_gthis), "ufront_app_HttpApplication_12"), 'execute'));
			$allDone = tink_core__Future_Future_Impl_::_tryFailingFlatMap(tink_core__Future_Future_Impl_::_tryFailingFlatMap($this->executeModules($errHandlerModules, $ctx, ufront_web_context_RequestCompletion::$CErrorHandlersComplete), array(new _hx_lambda(array(&$ctx), "ufront_app_HttpApplication_13"), 'execute')), array(new _hx_lambda(array(&$_gthis, &$ctx, &$logHandModules, &$resMidModules), "ufront_app_HttpApplication_14"), 'execute'));
			$allDone->handle(tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(&$doneTrigger, &$err), "ufront_app_HttpApplication_15"), 'execute')));
		} else {
			$msg2 = "You had an error after your error handler had already run.  Last active module: " . _hx_string_or_null($this->currentModule->className) . "." . _hx_string_or_null($this->currentModule->methodName);
			Sys::println($msg2);
			Sys::println("Error Data: " . Std::string($err->data));
			$err->throwSelf();
		}
	}
	public function clearMessages() {
		{
			$_g1 = 0;
			$_g = $this->messages->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$this->messages->pop();
				unset($i);
			}
		}
		return ufront_core_SurpriseTools::success();
	}
	public function flush($ctx) {
		if(($ctx->completion & 1 << ufront_web_context_RequestCompletion::$CFlushComplete->index) === 0) {
			$ctx->response->flush();
			$ctx1 = $ctx;
			$ctx1->completion = $ctx1->completion | 1 << ufront_web_context_RequestCompletion::$CFlushComplete->index;
		}
		return tink_core_Noise::$Noise;
	}
	public function executeRequest() {
		$context = null;
		if($this->pathToContentDir !== null) {
			$context = ufront_web_context_HttpContext::createContext(null, null, $this->injector, null, null, $this->urlFilters, $this->pathToContentDir);
		} else {
			$context = ufront_web_context_HttpContext::createContext(null, null, $this->injector, null, null, $this->urlFilters, null);
		}
		return $this->execute($context);
	}
	public function useModNekoCache() {
	}
	public function addUrlFilter($filter) {
		ufront_web_HttpError::throwIfNull($filter, "filter", _hx_anonymous(array("fileName" => "HttpApplication.hx", "lineNumber" => 619, "className" => "ufront.app.HttpApplication", "methodName" => "addUrlFilter")));
		$this->urlFilters->push($filter);
	}
	public function clearUrlFilters() {
		$this->urlFilters = (new _hx_array(array()));
	}
	public function setContentDirectory($relativePath) {
		$this->pathToContentDir = $relativePath;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'ufront.app.HttpApplication'; }
}
function ufront_app_HttpApplication_0(&$_gthis, $msg, $pos) {
	{
		$_gthis->messages->push(_hx_anonymous(array("msg" => $msg, "pos" => $pos, "type" => ufront_log_MessageType::$MTrace)));
	}
}
function ufront_app_HttpApplication_1($outcomes) {
	{
		{
			$_g2 = 0;
			while($_g2 < $outcomes->length) {
				$o = $outcomes[$_g2];
				$_g2 = $_g2 + 1;
				switch($o->index) {
				case 0:{
				}break;
				case 1:{
					$err = _hx_deref($o)->params[0];
					return tink_core_Outcome::Failure($err);
				}break;
				}
				unset($o);
			}
		}
		return tink_core_Outcome::Success(tink_core_Noise::$Noise);
	}
}
function ufront_app_HttpApplication_2(&$_gthis, $outcomes) {
	{
		$_gthis->modulesReady = null;
		{
			$_g2 = 0;
			while($_g2 < $outcomes->length) {
				$o = $outcomes[$_g2];
				$_g2 = $_g2 + 1;
				switch($o->index) {
				case 0:{
				}break;
				case 1:{
					return $o;
				}break;
				}
				unset($o);
			}
		}
		haxe_Log::$trace = (property_exists($_gthis, "originalTrace") ? $_gthis->originalTrace: array($_gthis, "originalTrace"));
		return tink_core_Outcome::Success(tink_core_Noise::$Noise);
	}
}
function ufront_app_HttpApplication_3($m) {
	{
		$this1 = null;
		$f = (property_exists($m, "requestIn") ? $m->requestIn: array($m, "requestIn"));
		$this2 = array(new _hx_lambda(array(&$f), "ufront_app_HttpApplication_16"), 'execute');
		$this1 = new tink_core_MPair($this2, _hx_anonymous(array("methodName" => "requestIn", "lineNumber" => -1, "fileName" => "", "customParams" => (new _hx_array(array())), "className" => Type::getClassName(Type::getClass($m)))));
		return $this1;
	}
}
function ufront_app_HttpApplication_4($m1) {
	{
		$this3 = null;
		$f1 = (property_exists($m1, "handleRequest") ? $m1->handleRequest: array($m1, "handleRequest"));
		$this4 = array(new _hx_lambda(array(&$f1), "ufront_app_HttpApplication_17"), 'execute');
		$this3 = new tink_core_MPair($this4, _hx_anonymous(array("methodName" => "handleRequest", "lineNumber" => -1, "fileName" => "", "customParams" => (new _hx_array(array())), "className" => Type::getClassName(Type::getClass($m1)))));
		return $this3;
	}
}
function ufront_app_HttpApplication_5($m2) {
	{
		$this5 = null;
		$f2 = (property_exists($m2, "responseOut") ? $m2->responseOut: array($m2, "responseOut"));
		$this6 = array(new _hx_lambda(array(&$f2), "ufront_app_HttpApplication_18"), 'execute');
		$this5 = new tink_core_MPair($this6, _hx_anonymous(array("methodName" => "requestOut", "lineNumber" => -1, "fileName" => "", "customParams" => (new _hx_array(array())), "className" => Type::getClassName(Type::getClass($m2)))));
		return $this5;
	}
}
function ufront_app_HttpApplication_6(&$_gthis, $m3) {
	{
		$f3 = (property_exists($m3, "log") ? $m3->log: array($m3, "log"));
		$a2 = $_gthis->messages;
		$a = array(new _hx_lambda(array(&$a2, &$f3), "ufront_app_HttpApplication_19"), 'execute');
		$this7 = new tink_core_MPair($a, _hx_anonymous(array("methodName" => "log", "lineNumber" => -1, "fileName" => "", "customParams" => (new _hx_array(array("httpContext", "appMessages"))), "className" => Type::getClassName(Type::getClass($m3)))));
		return $this7;
	}
}
function ufront_app_HttpApplication_7(&$_gthis, &$httpContext, &$logHandModules, &$reqHandModules, &$reqMidModules, &$resMidModules, $n) {
	{
		return tink_core__Future_Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($reqMidModules, $httpContext, ufront_web_context_RequestCompletion::$CRequestMiddlewareComplete), array(new _hx_lambda(array(&$_gthis, &$httpContext, &$logHandModules, &$reqHandModules, &$resMidModules), "ufront_app_HttpApplication_20"), 'execute'));
	}
}
function ufront_app_HttpApplication_8(&$httpContext) {
	{
		$msg1 = "End executing request " . _hx_string_or_null($httpContext->getRequestUri());
	}
}
function ufront_app_HttpApplication_9(&$_gthis, &$ctx, &$done, &$flag, &$modules, &$runNext) {
	{
		$m = $modules->shift();
		$runNext1 = null;
		if($flag !== null) {
			$runNext1 = ($ctx->completion & 1 << $flag->index) !== 0;
		} else {
			$runNext1 = false;
		}
		if($runNext1) {
			$msg1 = "  Finished execcuting modules for " . Std::string($flag) . " (completion flag was set)";
			$done->trigger(tink_core_Outcome::Success(tink_core_Noise::$Noise));
		} else {
			if($m === null) {
				$msg2 = "  Finished execcuting modules for " . Std::string($flag) . " (all modules completed)";
				if($flag !== null) {
					$ctx1 = $ctx;
					$ctx1->completion = $ctx1->completion | 1 << $flag->index;
				}
				$done->trigger(tink_core_Outcome::Success(tink_core_Noise::$Noise));
			} else {
				$moduleCb = (property_exists($m, "a") ? $m->a: array($m, "a"));
				$_gthis->currentModule = $m->b;
				$msg3 = "    Executing module " . _hx_string_or_null($_gthis->currentModule->className) . "." . _hx_string_or_null($_gthis->currentModule->methodName) . "()";
				$moduleResult = null;
				try {
					$moduleResult = call_user_func_array($moduleCb, array($ctx));
				}catch(Exception $__hx__e) {
					$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
					$e = $_ex_;
					{
						{
							$msg4 = "Caught error " . Std::string($e) . " while executing module ";
							$ctx->messages->push(_hx_anonymous(array("msg" => _hx_string_or_null($msg4) . _hx_string_or_null($_gthis->currentModule->className) . "." . _hx_string_or_null($_gthis->currentModule->methodName) . " in HttpApplication.executeModules()", "pos" => _hx_anonymous(array("fileName" => "HttpApplication.hx", "lineNumber" => 422, "className" => "ufront.app.HttpApplication", "methodName" => "executeModules")), "type" => ufront_log_MessageType::$MLog)));
						}
						$moduleResult = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure(ufront_web_HttpError::wrap($e, null, $_gthis->currentModule))));
					}
				}
				$moduleResult->handle(array(new _hx_lambda(array(&$_gthis, &$ctx, &$done, &$runNext), "ufront_app_HttpApplication_21"), 'execute'));
			}
		}
	}
}
function ufront_app_HttpApplication_10(&$err, $m) {
	{
		$args = (new _hx_array(array($err->toString())));
		$b = _hx_anonymous(array("methodName" => "handleError", "lineNumber" => -1, "fileName" => "", "customParams" => $args, "className" => Type::getClassName(Type::getClass($m))));
		$this1 = null;
		$f = (property_exists($m, "handleError") ? $m->handleError: array($m, "handleError"));
		$a1 = $err;
		$this1 = new tink_core_MPair(array(new _hx_lambda(array(&$a1, &$f), "ufront_app_HttpApplication_22"), 'execute'), $b);
		return $this1;
	}
}
function ufront_app_HttpApplication_11($m1) {
	{
		$this2 = null;
		$f1 = (property_exists($m1, "responseOut") ? $m1->responseOut: array($m1, "responseOut"));
		$this3 = array(new _hx_lambda(array(&$f1), "ufront_app_HttpApplication_23"), 'execute');
		$this2 = new tink_core_MPair($this3, _hx_anonymous(array("methodName" => "requestOut", "lineNumber" => -1, "fileName" => "", "customParams" => (new _hx_array(array())), "className" => Type::getClassName(Type::getClass($m1)))));
		return $this2;
	}
}
function ufront_app_HttpApplication_12(&$_gthis, $m2) {
	{
		$f2 = (property_exists($m2, "log") ? $m2->log: array($m2, "log"));
		$a21 = $_gthis->messages;
		$a = array(new _hx_lambda(array(&$a21, &$f2), "ufront_app_HttpApplication_24"), 'execute');
		$this4 = new tink_core_MPair($a, _hx_anonymous(array("methodName" => "log", "lineNumber" => -1, "fileName" => "", "customParams" => (new _hx_array(array("httpContext", "appMessages"))), "className" => Type::getClassName(Type::getClass($m2)))));
		return $this4;
	}
}
function ufront_app_HttpApplication_13(&$ctx, $n) {
	{
		$ctx2 = $ctx;
		$ctx2->completion = $ctx2->completion | 1 << ufront_web_context_RequestCompletion::$CRequestHandlersComplete->index;
		return ufront_core_SurpriseTools::success();
	}
}
function ufront_app_HttpApplication_14(&$_gthis, &$ctx, &$logHandModules, &$resMidModules, $n1) {
	{
		return tink_core__Future_Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($resMidModules, $ctx, ufront_web_context_RequestCompletion::$CResponseMiddlewareComplete), array(new _hx_lambda(array(&$_gthis, &$ctx, &$logHandModules), "ufront_app_HttpApplication_25"), 'execute'));
	}
}
function ufront_app_HttpApplication_15(&$doneTrigger, &$err) {
	{
		$msg1 = "  End handling error " . Std::string($err);
		$doneTrigger->trigger(tink_core_Outcome::Failure($err));
	}
}
function ufront_app_HttpApplication_16(&$f, $a1) {
	{
		return call_user_func_array($f, array($a1));
	}
}
function ufront_app_HttpApplication_17(&$f1, $a11) {
	{
		return call_user_func_array($f1, array($a11));
	}
}
function ufront_app_HttpApplication_18(&$f2, $a12) {
	{
		return call_user_func_array($f2, array($a12));
	}
}
function ufront_app_HttpApplication_19(&$a2, &$f3, $a13) {
	{
		return call_user_func_array($f3, array($a13, $a2));
	}
}
function ufront_app_HttpApplication_20(&$_gthis, &$httpContext, &$logHandModules, &$reqHandModules, &$resMidModules, $n1) {
	{
		return tink_core__Future_Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($reqHandModules, $httpContext, ufront_web_context_RequestCompletion::$CRequestHandlersComplete), array(new _hx_lambda(array(&$_gthis, &$httpContext, &$logHandModules, &$resMidModules), "ufront_app_HttpApplication_26"), 'execute'));
	}
}
function ufront_app_HttpApplication_21(&$_gthis, &$ctx, &$done, &$runNext, $result) {
	{
		switch($result->index) {
		case 0:{
			call_user_func($runNext);
		}break;
		case 1:{
			$e1 = _hx_deref($result)->params[0];
			$_gthis->handleError($e1, $ctx, $done);
		}break;
		}
	}
}
function ufront_app_HttpApplication_22(&$a1, &$f, $a2) {
	{
		return call_user_func_array($f, array($a1, $a2));
	}
}
function ufront_app_HttpApplication_23(&$f1, $a11) {
	{
		return call_user_func_array($f1, array($a11));
	}
}
function ufront_app_HttpApplication_24(&$a21, &$f2, $a12) {
	{
		return call_user_func_array($f2, array($a12, $a21));
	}
}
function ufront_app_HttpApplication_25(&$_gthis, &$ctx, &$logHandModules, $n2) {
	{
		return tink_core__Future_Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($logHandModules, $ctx, ufront_web_context_RequestCompletion::$CLogHandlersComplete), array(new _hx_lambda(array(&$_gthis, &$ctx), "ufront_app_HttpApplication_27"), 'execute'));
	}
}
function ufront_app_HttpApplication_26(&$_gthis, &$httpContext, &$logHandModules, &$resMidModules, $n2) {
	{
		return tink_core__Future_Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($resMidModules, $httpContext, ufront_web_context_RequestCompletion::$CResponseMiddlewareComplete), array(new _hx_lambda(array(&$_gthis, &$httpContext, &$logHandModules), "ufront_app_HttpApplication_28"), 'execute'));
	}
}
function ufront_app_HttpApplication_27(&$_gthis, &$ctx, $n3) {
	{
		return tink_core__Future_Future_Impl_::_tryMap($_gthis->clearMessages(), array(new _hx_lambda(array(&$_gthis, &$ctx), "ufront_app_HttpApplication_29"), 'execute'));
	}
}
function ufront_app_HttpApplication_28(&$_gthis, &$httpContext, &$logHandModules, $n3) {
	{
		return tink_core__Future_Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($logHandModules, $httpContext, ufront_web_context_RequestCompletion::$CLogHandlersComplete), array(new _hx_lambda(array(&$_gthis, &$httpContext), "ufront_app_HttpApplication_30"), 'execute'));
	}
}
function ufront_app_HttpApplication_29(&$_gthis, &$ctx, $n4) {
	{
		return $_gthis->flush($ctx);
	}
}
function ufront_app_HttpApplication_30(&$_gthis, &$httpContext, $n4) {
	{
		return tink_core__Future_Future_Impl_::_tryMap($_gthis->clearMessages(), array(new _hx_lambda(array(&$_gthis, &$httpContext), "ufront_app_HttpApplication_31"), 'execute'));
	}
}
function ufront_app_HttpApplication_31(&$_gthis, &$httpContext, $n5) {
	{
		return $_gthis->flush($httpContext);
	}
}
