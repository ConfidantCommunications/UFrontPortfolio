<?php

// Generated by Haxe 3.4.4
class ufront_core_CallbackTools {
	public function __construct(){}
	static function asVoidSurprise($cb, $pos = null) {
		$t = new tink_core_FutureTrigger();
		call_user_func_array($cb, array(array(new _hx_lambda(array(&$pos, &$t), "ufront_core_CallbackTools_0"), 'execute')));
		return $t;
	}
	static function asSurprise($cb, $pos = null) {
		$t = new tink_core_FutureTrigger();
		call_user_func_array($cb, array(array(new _hx_lambda(array(&$pos, &$t), "ufront_core_CallbackTools_1"), 'execute')));
		return $t;
	}
	static function asSurprisePair($cb, $pos = null) {
		$t = new tink_core_FutureTrigger();
		call_user_func_array($cb, array(array(new _hx_lambda(array(&$pos, &$t), "ufront_core_CallbackTools_2"), 'execute')));
		return $t;
	}
	function __toString() { return 'ufront.core.CallbackTools'; }
}
function ufront_core_CallbackTools_0(&$pos, &$t, $error) {
	{
		if($error !== null) {
			$e = "" . Std::string($error);
			$e1 = tink_core_TypedError::withData(500, $e, $pos, _hx_anonymous(array("fileName" => "AsyncTools.hx", "lineNumber" => 216, "className" => "ufront.core.CallbackTools", "methodName" => "asVoidSurprise")));
			$t->trigger(tink_core_Outcome::Failure($e1));
		} else {
			$t->trigger(tink_core_Outcome::Success(tink_core_Noise::$Noise));
		}
	}
}
function ufront_core_CallbackTools_1(&$pos, &$t, $error, $val) {
	{
		if($error !== null) {
			$e = "" . Std::string($error);
			$e1 = tink_core_TypedError::withData(500, $e, $pos, _hx_anonymous(array("fileName" => "AsyncTools.hx", "lineNumber" => 241, "className" => "ufront.core.CallbackTools", "methodName" => "asSurprise")));
			$t->trigger(tink_core_Outcome::Failure($e1));
		} else {
			$t->trigger(tink_core_Outcome::Success($val));
		}
	}
}
function ufront_core_CallbackTools_2(&$pos, &$t, $error, $val1, $val2) {
	{
		if($error !== null) {
			$e = "" . Std::string($error);
			$e1 = tink_core_TypedError::withData(500, $e, $pos, _hx_anonymous(array("fileName" => "AsyncTools.hx", "lineNumber" => 266, "className" => "ufront.core.CallbackTools", "methodName" => "asSurprisePair")));
			$t->trigger(tink_core_Outcome::Failure($e1));
		} else {
			$this1 = new tink_core_MPair($val1, $val2);
			$t->trigger(tink_core_Outcome::Success($this1));
		}
	}
}
