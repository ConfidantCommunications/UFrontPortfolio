<?php

// Generated by Haxe 3.4.2
class ufront_log_FileLogger implements ufront_app_UFInitRequired, ufront_app_UFLogHandler{
	public function __construct($path) {
		if(!php_Boot::$skip_constructor) {
		$this->path = $path;
	}}
	public $path;
	public function init($app) {
		return ufront_core_SurpriseTools::success();
	}
	public function dispose($app) {
		$this->path = null;
		return ufront_core_SurpriseTools::success();
	}
	public function log($context, $appMessages) {
		$logFile = $context->get_contentDirectory();
		$logFile1 = _hx_string_or_null($logFile) . _hx_string_or_null($this->path);
		$req = $context->request;
		$res = $context->response;
		$userDetails = $req->get_clientIP();
		try {
			$tmp = null;
			if(null !== $context->session) {
				$tmp = $context->session->get_id();
			} else {
				$tmp = null;
			}
			if($tmp !== null) {
				$userDetails1 = null;
				if(null !== $context->session) {
					$userDetails1 = $context->session->get_id();
				} else {
					$userDetails1 = null;
				}
				$userDetails = _hx_string_or_null($userDetails) . _hx_string_or_null((" " . _hx_string_or_null($userDetails1)));
			}
			$tmp1 = null;
			$tmp2 = null;
			if($context->auth !== null) {
				$tmp2 = $context->auth->get_currentUser() !== null;
			} else {
				$tmp2 = false;
			}
			if($tmp2) {
				$tmp1 = $context->auth->get_currentUser()->get_userID();
			} else {
				$tmp1 = null;
			}
			if($tmp1 !== null) {
				$userDetails2 = null;
				$userDetails3 = null;
				if($context->auth !== null) {
					$userDetails3 = $context->auth->get_currentUser() !== null;
				} else {
					$userDetails3 = false;
				}
				if($userDetails3) {
					$userDetails2 = $context->auth->get_currentUser()->get_userID();
				} else {
					$userDetails2 = null;
				}
				$userDetails = _hx_string_or_null($userDetails) . _hx_string_or_null((" " . _hx_string_or_null($userDetails2)));
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
			}
		}
		$content = "" . Std::string(Date::now()) . " [";
		$content1 = _hx_string_or_null($content) . _hx_string_or_null($req->get_httpMethod()) . "] [";
		$content2 = _hx_string_or_null($content1) . _hx_string_or_null($req->get_uri()) . "] from [" . _hx_string_or_null($userDetails) . "], response: [";
		$content3 = _hx_string_or_null($content2) . _hx_string_rec($res->status, "") . " ";
		$content4 = _hx_string_or_null($content3) . _hx_string_or_null($res->get_contentType()) . "]\x0A";
		{
			$_g = 0;
			$_g1 = $context->messages;
			while($_g < $_g1->length) {
				$msg = $_g1[$_g];
				$_g = $_g + 1;
				$content4 = _hx_string_or_null($content4) . _hx_string_or_null(("\x09" . _hx_string_or_null(ufront_log_FileLogger::format($msg)) . "\x0A"));
				unset($msg);
			}
		}
		if($appMessages !== null) {
			$_g2 = 0;
			while($_g2 < $appMessages->length) {
				$msg1 = $appMessages[$_g2];
				$_g2 = $_g2 + 1;
				$content4 = _hx_string_or_null($content4) . _hx_string_or_null(("\x09" . _hx_string_or_null(ufront_log_FileLogger::format($msg1)) . "\x0A"));
				unset($msg1);
			}
		}
		{
			$path = haxe_io_Path::addTrailingSlash(haxe_io_Path::directory($logFile1));
			$_p = null;
			$parts = (new _hx_array(array()));
			while(true) {
				$_p = haxe_io_Path::directory($path);
				if(!($path !== $_p)) {
					break;
				}
				$parts->unshift($path);
				$path = $_p;
			}
			{
				$_g3 = 0;
				while($_g3 < $parts->length) {
					$part = $parts[$_g3];
					$_g3 = $_g3 + 1;
					$tmp3 = null;
					if(_hx_char_code_at($part, strlen($part) - 1) !== 58) {
						$tmp3 = !file_exists($part);
					} else {
						$tmp3 = false;
					}
					if($tmp3) {
						@mkdir($part, 493);
					}
					unset($tmp3,$part);
				}
			}
		}
		$file = $context->get_contentDirectory();
		$file1 = sys_io_File::append(_hx_string_or_null($file) . _hx_string_or_null($this->path), null);
		$file1->writeString($content4);
		$file1->close();
		return ufront_core_SurpriseTools::success();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function format($msg) {
		$msgStr = Std::string($msg->msg);
		$text = ufront_log_FileLogger::$REMOVENL->replace($msgStr, "\\n");
		$type = _hx_substr(Type::enumConstructor($msg->type), 1, null);
		$pos = $msg->pos;
		return "[" . _hx_string_or_null($type) . "] " . _hx_string_or_null($pos->className) . "." . _hx_string_or_null($pos->methodName) . "(" . _hx_string_rec($pos->lineNumber, "") . "): " . _hx_string_or_null($text);
	}
	static $REMOVENL;
	function __toString() { return 'ufront.log.FileLogger'; }
}
ufront_log_FileLogger::$REMOVENL = new EReg("[\x0A\x0D]", "g");
