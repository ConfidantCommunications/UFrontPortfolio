<?php

// Generated by Haxe 3.4.4
class ufront_mail_Email {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->html = null;
		$this->text = null;
		$this->subject = "";
		$this->replyToAddress = null;
		$this->fromAddress = null;
		$this->toList = new HList();
		$this->ccList = new HList();
		$this->bccList = new HList();
		$this->headers = new haxe_ds_StringMap();
		$this->date = Date::now();
		$this->charset = "utf-8";
		$this->images = new HList();
		$this->attachments = new HList();
	}}
	public $fromAddress;
	public $replyToAddress;
	public $toList;
	public $ccList;
	public $bccList;
	public $date;
	public $charset;
	public $headers;
	public $subject;
	public $text;
	public $html;
	public $images;
	public $attachments;
	public function to($email = null, $emails = null) {
		if($email !== null) {
			$this->toList->add($email);
		}
		if($emails !== null) {
			$e = $emails->iterator();
			while($e->hasNext()) {
				$e1 = $e->next();
				$this->toList->add($e1);
				unset($e1);
			}
		}
		return $this;
	}
	public function cc($email = null, $emails = null) {
		if($email !== null) {
			$this->ccList->add($email);
		}
		if($emails !== null) {
			$e = $emails->iterator();
			while($e->hasNext()) {
				$e1 = $e->next();
				$this->ccList->add($e1);
				unset($e1);
			}
		}
		return $this;
	}
	public function bcc($email = null, $emails = null) {
		if($email !== null) {
			$this->bccList->add($email);
		}
		if($emails !== null) {
			$e = $emails->iterator();
			while($e->hasNext()) {
				$e1 = $e->next();
				$this->bccList->add($e1);
				unset($e1);
			}
		}
		return $this;
	}
	public function from($email) {
		$this->fromAddress = $email;
		return $this;
	}
	public function replyTo($email) {
		$this->replyToAddress = $email;
		return $this;
	}
	public function addHeader($name, $value) {
		if($this->headers->exists($name)) {
			$tmp = $this->headers->get($name);
			$tmp->push($value);
		} else {
			$this->headers->set($name, (new _hx_array(array($value))));
		}
		return $this;
	}
	public function setHeader($name, $value) {
		$this->headers->set($name, (new _hx_array(array($value))));
		return $this;
	}
	public function getHeader($name) {
		if($this->headers->exists($name)) {
			return _hx_array_get($this->headers->get($name), 0);
		} else {
			return null;
		}
	}
	public function getHeadersNamed($name) {
		if($this->headers->exists($name)) {
			return $this->headers->get($name);
		} else {
			return (new _hx_array(array()));
		}
	}
	public function getHeaders() {
		$arr = (new _hx_array(array()));
		{
			$n = $this->headers->keys();
			while($n->hasNext()) {
				$n1 = $n->next();
				$_g = 0;
				$_g1 = $this->headers->get($n1);
				while($_g < $_g1->length) {
					$v = $_g1[$_g];
					$_g = $_g + 1;
					$this1 = new tink_core_MPair($n1, $v);
					$arr->push($this1);
					unset($v,$this1);
				}
				unset($n1,$_g1,$_g);
			}
		}
		$arr->sort(array(new _hx_lambda(array(), "ufront_mail_Email_0"), 'execute'));
		return $arr;
	}
	public function setDate($date) {
		$this->date = $date;
		return $this;
	}
	public function setCharset($charset) {
		$this->charset = $charset;
		return $this;
	}
	public function setSubject($subject = null) {
		if($subject === null) {
			$subject = "";
		}
		$this->subject = $subject;
		return $this;
	}
	public function setHtml($html = null) {
		$this->html = $html;
		return $this;
	}
	public function setText($text = null) {
		$this->text = $text;
		return $this;
	}
	public function attach($name, $type, $content) {
		$this1 = _hx_anonymous(array("type" => $name, "name" => $type, "content" => $content));
		$this->attachments->add($this1);
		return $this;
	}
	public function attachImage($name, $type, $content) {
		$this1 = _hx_anonymous(array("type" => $name, "name" => $type, "content" => $content));
		$this->images->add($this1);
		return $this;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $headerOrder;
	function __toString() { return 'ufront.mail.Email'; }
}
ufront_mail_Email::$headerOrder = (new _hx_array(array("Return-Path", "Received", "Date", "From", "Subject", "Sender", "To", "Cc", "Bcc", "Content-Type", "X-Mailer", "X-Originating-IP", "X-Originating-User")));
function ufront_mail_Email_0($h1, $h2) {
	{
		$tmp = ufront_mail_Email::$headerOrder->indexOf($h1->a, null);
		return Reflect::compare($tmp, ufront_mail_Email::$headerOrder->indexOf($h2->a, null));
	}
}
